<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>isked - Account Settings</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="/css/toast.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="/js/toast.js" defer></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Toast Container -->
    <div id="toast-container"></div>

    <!-- Navigation -->
    <%- include('partials/navigation', { currentPage: 'settings', user: user }) %>

    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Account Settings</h1>
                    <p class="text-sm text-gray-600 mt-1">Manage your account details and preferences</p>
                </div>
            </div>
        </div>
    </div>

    <main class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div class="space-y-8">

            <!-- Account Information Section -->
            <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-5 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Account Information</h2>
                </div>
                <div class="px-6 py-5 space-y-6">
                    <!-- Email Address -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                        <div>
                            <input type="email" value="<%= user.email %>" readonly
                                class="block w-full bg-gray-50 border-gray-300 rounded-lg text-gray-600 sm:text-sm cursor-not-allowed px-3 py-2">
                            <span class="mt-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                Verified
                            </span>
                        </div>
                    </div>

                    <!-- Full Name -->
                    <div>
                        <label for="full-name" class="block text-sm font-medium text-gray-700 mb-2">
                            Full Name
                        </label>
                        <input type="text" id="full-name" name="full-name"
                            class="block w-full border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50 cursor-not-allowed px-3 py-2"
                            value="<%= user.full_name || '' %>"
                            placeholder="Enter your full name"
                            readonly>
                        <p class="mt-2 text-sm text-gray-500">
                            Contact support to change your full name
                        </p>
                    </div>
                </div>
            </div>

            <!-- Booking Information Section -->
            <div class="bg-white shadow rounded-lg mt-8">
                <div class="px-6 py-5 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Booking Information</h2>
                </div>
                <div class="px-6 py-5 space-y-6">
                    <!-- Display Name -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Display Name</label>
                        <div class="relative">
                            <div id="display-name-display" class="flex items-center space-x-3">
                                <input type="text" value="<%= user.display_name || user.full_name || '' %>" readonly
                                    class="flex-1 bg-gray-50 border-gray-300 rounded-lg text-gray-600 sm:text-sm cursor-not-allowed px-3 py-2">
                                <button id="edit-display-name-btn" type="button"
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    Change
                                </button>
                            </div>
                            <div id="display-name-edit" class="hidden">
                                <form class="space-y-4">
                                    <div>
                                        <input type="text" id="new-display-name" name="new-display-name"
                                            class="block w-full border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 sm:text-sm px-4 py-3"
                                            placeholder="Enter your display name"
                                            value="<%= user.display_name || user.full_name || '' %>">
                                        <p id="display-name-error" class="mt-2 text-sm text-red-600 hidden"></p>
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <button type="submit" id="save-display-name-btn"
                                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                            disabled>
                                            Save
                                        </button>
                                        <button type="button" id="cancel-display-name-edit"
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                            Cancel
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <p class="mt-2 text-sm text-gray-500">
                            This name will be shown on your booking page
                        </p>
                    </div>

                    <!-- Username -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Username</label>
                        <div class="relative">
                            <div id="username-display" class="flex items-center space-x-3">
                                <input type="text" value="<%= user.username %>" readonly
                                    class="flex-1 bg-gray-50 border-gray-300 rounded-lg text-gray-600 sm:text-sm cursor-not-allowed px-3 py-2">
                                <button id="edit-username-btn" type="button"
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    Change
                                </button>
                            </div>
                            <div id="username-edit" class="hidden">
                                <form id="inline-username-form" class="space-y-4">
                                    <div>
                                        <input type="text" id="new-username" name="new-username"
                                            class="block w-full border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 sm:text-sm px-4 py-3"
                                            placeholder="Enter new username"
                                            value="<%= user.username %>">
                                        <p id="username-error" class="mt-2 text-sm text-red-600 hidden"></p>
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <button type="submit" id="save-username-btn"
                                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                            disabled>
                                            Save
                                        </button>
                                        <button type="button" id="cancel-username-edit"
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                            Cancel
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Booking Link -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Booking Link</label>
                        <div class="flex items-center space-x-3">
                            <input type="text" id="booking-link" value="isked.app/booking/<%= user.username %>" readonly
                                class="flex-1 bg-gray-50 border-gray-300 rounded-lg text-gray-600 sm:text-sm cursor-not-allowed px-3 py-2">
                            <button id="copy-link-btn" type="button"
                                class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                </svg>
                                Copy
                            </button>
                        </div>
                    </div>

                    <!-- Meeting Link -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Meeting Link</label>
                        <div class="relative">
                            <div id="meeting-link-display" class="flex items-center space-x-3">
                                <input type="text" value="<%= user.meeting_link || '' %>" readonly
                                    class="flex-1 bg-gray-50 border-gray-300 rounded-lg text-gray-600 sm:text-sm cursor-not-allowed px-3 py-2">
                                <button id="edit-meeting-link-btn" type="button"
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    Change
                                </button>
                            </div>
                            <div id="meeting-link-edit" class="hidden">
                                <form class="space-y-4">
                                    <div>
                                        <input type="text" id="new-meeting-link" name="new-meeting-link"
                                            class="block w-full border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 sm:text-sm px-4 py-3"
                                            placeholder="Enter your Zoom or Google Meet link"
                                            value="<%= user.meeting_link || '' %>">
                                        <p id="meeting-link-error" class="mt-2 text-sm text-red-600 hidden"></p>
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <button type="submit" id="save-meeting-link-btn"
                                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                            disabled>
                                            Save
                                        </button>
                                        <button type="button" id="cancel-meeting-link-edit"
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                            Cancel
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <p class="mt-2 text-sm text-gray-500">
                            This link will be included in booking confirmation emails
                        </p>
                    </div>
                </div>
            </div>

            <!-- Google Calendar Integration Section -->
            <div class="bg-white shadow rounded-lg mt-8">
                <div class="px-6 py-5 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Google Calendar Integration</h2>
                    <p class="mt-1 text-sm text-gray-600">
                        Connect your Google Calendar to automatically block time slots when you have existing events
                    </p>
                </div>
                <div class="px-6 py-5 space-y-6">
                    <!-- Connection Status -->
                    <div id="google-calendar-status">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <div id="connection-status-icon" class="w-3 h-3 rounded-full bg-gray-300"></div>
                                <div>
                                    <p class="text-sm font-medium text-gray-900" id="connection-status-text">
                                        Checking connection status...
                                    </p>
                                    <p class="text-sm text-gray-500" id="connection-status-description">
                                        Connect your Google Calendar to enable automatic blocking
                                    </p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-3">
                                <button id="connect-google-calendar-btn" type="button"
                                    class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                                        <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                                        <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                                        <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                                    </svg>
                                    Connect Google Calendar
                                </button>
                                <button id="disconnect-google-calendar-btn" type="button" class="hidden
                                    inline-flex items-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-lg text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                    Disconnect
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Google Calendar Settings -->
                    <div id="google-calendar-settings" class="hidden">
                        <!-- Calendar Selection -->
                        <div class="border-t border-gray-200 pt-6">
                            <h3 class="text-sm font-medium text-gray-900 mb-4">Calendar Selection</h3>
                            <div class="space-y-4">
                                <div>
                                    <label for="calendar-select" class="block text-sm font-medium text-gray-700 mb-2">
                                        Select Calendar for New Appointments
                                    </label>
                                    <select id="calendar-select" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                        <option value="">Loading calendars...</option>
                                    </select>
                                    <p class="mt-1 text-sm text-gray-500">Choose which Google Calendar to sync new appointments to</p>
                                </div>
                            </div>
                        </div>

                        <!-- Test Connection -->
                        <div class="border-t border-gray-200 pt-6">
                            <button id="test-calendar-sync-btn" type="button"
                                class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                </svg>
                                Test Calendar Sync
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Availability Settings Section -->
            <div class="bg-white shadow rounded-lg mt-8">
                <div class="px-6 py-5 border-b border-gray-200">
                    <h2 class="text-lg font-medium text-gray-900">Availability Settings</h2>
                    <p class="mt-1 text-sm text-gray-500">Configure your working hours and break times</p>
                </div>
                <div class="px-6 py-5">
                    <form id="availability-form" method="POST" action="/settings/availability">
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-4">Working Days</h3>
                            <div class="space-y-4">
                                <% ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].forEach((day, index) => { %>
                                    <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 pb-3 border-b last:border-0">
                                        <div class="flex items-center w-full sm:w-1/3">
                                            <input type="checkbox" id="day-<%= index %>" name="working_days" value="<%= index %>" class="w-4 h-4 mr-3">
                                            <label for="day-<%= index %>" class="text-gray-700"><%= day %></label>
                                        </div>
                                        <div class="flex flex-wrap items-center gap-3 w-full sm:w-2/3">
                                            <input type="time" class="work-start border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="09:00" disabled>
                                            <span class="text-gray-500 px-2">to</span>
                                            <input type="time" class="work-end border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="17:00" disabled>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        </div>

                        <div class="mb-8">
                            <h3 class="text-lg font-medium mb-4">Universal Breaks</h3>
                            <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 pb-3">
                                <div class="flex items-center w-full sm:w-1/3">
                                    <input type="checkbox" id="break-enabled" class="w-4 h-4 mr-3">
                                    <label for="break-enabled" class="text-gray-700">Enable Break Time</label>
                                </div>
                                <div class="flex flex-wrap items-center gap-3 w-full sm:w-2/3">
                                    <input type="time" id="break-start" class="border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="12:00" disabled>
                                    <span class="text-gray-500 px-2">to</span>
                                    <input type="time" id="break-end" class="border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="13:00" disabled>
                                </div>
                            </div>

                            <!-- Buffer Between Bookings -->
                            <div class="mt-6 border-t pt-6">
                                <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
                                    <div class="w-full sm:w-1/3">
                                        <label for="buffer-minutes" class="text-gray-700 font-medium">Buffer Between Bookings</label>
                                        <p class="text-sm text-gray-500 mt-1">Add padding time after each booking</p>
                                    </div>
                                    <div class="w-full sm:w-2/3">
                                        <select id="buffer-minutes" class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                            <option value="0">No buffer</option>
                                            <option value="10">10 minutes</option>
                                            <option value="15">15 minutes</option>
                                            <option value="30">30 minutes</option>
                                            <option value="45">45 minutes</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-4 rounded-lg transition-colors">
                            Save Settings
                        </button>
                        
                        <!-- Hidden inputs for working hours -->
                        <div id="hidden-inputs"></div>
                    </form>
                </div>
            </div>

        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing functions...');
            initUsernameEditing();
            initDisplayNameEditing();
            initMeetingLinkEditing();
            initCopyLink();
            initAvailabilitySettings();
            initGoogleCalendarIntegration();
            handleUrlMessages();
            handleAvailabilitySuccess();
        });

        // Handle success/error messages from URL parameters
        function handleUrlMessages() {
            const urlParams = new URLSearchParams(window.location.search);
            const success = urlParams.get('success');
            const error = urlParams.get('error');
            
            if (success === 'google_connected') {
                toast.show({
                    type: 'success',
                    title: 'Connected!',
                    message: 'Google Calendar has been connected successfully'
                });
                // Clear the URL parameters
                window.history.replaceState({}, document.title, window.location.pathname);
            }
            
            if (error) {
                let errorMessage = 'An error occurred';
                switch (error) {
                    case 'invalid_state':
                        errorMessage = 'Invalid authentication state. Please try again.';
                        break;
                    case 'auth_denied':
                        errorMessage = 'Authorization was denied. Please try again.';
                        break;
                    case 'connection_failed':
                        errorMessage = 'Failed to connect Google Calendar. Please try again.';
                        break;
                    case 'auth_init_failed':
                        errorMessage = 'Failed to initiate Google Calendar connection.';
                        break;
                }
                
                toast.show({
                    type: 'error',
                    title: 'Connection Failed',
                    message: errorMessage
                });
                // Clear the URL parameters
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        }

        // Copy link functionality
        function initCopyLink() {
            console.log('Initializing copy link...');
            const copyBtn = document.getElementById('copy-link-btn');
            const bookingLink = document.getElementById('booking-link');

            copyBtn.addEventListener('click', function() {
                console.log('Copy button clicked');
                const linkValue = bookingLink.value;
                const fullUrl = `https://${linkValue}`;
                
                // Try to use the modern clipboard API
                if (navigator.clipboard && window.isSecureContext) {
                    navigator.clipboard.writeText(fullUrl).then(() => {
                        toast.show({
                            type: 'success',
                            title: 'Copied!',
                            message: 'Booking link copied to clipboard'
                        });
                        
                        // Change button text temporarily
                        const originalText = copyBtn.innerHTML;
                        copyBtn.innerHTML = '<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>Copied!';
                        copyBtn.classList.add('text-green-600', 'border-green-300');
                        
                        setTimeout(() => {
                            copyBtn.innerHTML = originalText;
                            copyBtn.classList.remove('text-green-600', 'border-green-300');
                        }, 2000);
                    }).catch(() => {
                        fallbackCopy(fullUrl);
                    });
                } else {
                    fallbackCopy(fullUrl);
                }
            });

            function fallbackCopy(text) {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                textArea.style.position = 'fixed';
                textArea.style.left = '-999999px';
                textArea.style.top = '-999999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                
                try {
                    document.execCommand('copy');
                    toast.show({
                        type: 'success',
                        title: 'Copied!',
                        message: 'Booking link copied to clipboard'
                    });
                } catch (err) {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: 'Failed to copy link. Please copy manually.'
                    });
                }
                
                document.body.removeChild(textArea);
            }
        }

        // Display Name inline editing
        function initDisplayNameEditing() {
            console.log('Initializing display name editing...');
            const editBtn = document.getElementById('edit-display-name-btn');
            const display = document.getElementById('display-name-display');
            const edit = document.getElementById('display-name-edit');
            const form = edit.querySelector('form');
            const input = document.getElementById('new-display-name');
            const cancelBtn = document.getElementById('cancel-display-name-edit');
            const saveBtn = document.getElementById('save-display-name-btn');
            const errorDisplay = document.getElementById('display-name-error');
            let currentDisplayName = input.value;

            console.log('Display name elements found:', {
                editBtn: !!editBtn,
                display: !!display,
                edit: !!edit,
                form: !!form,
                input: !!input,
                cancelBtn: !!cancelBtn,
                saveBtn: !!saveBtn,
                errorDisplay: !!errorDisplay
            });

            function showEdit() {
                console.log('Showing display name edit form');
                display.classList.add('hidden');
                edit.classList.remove('hidden');
                input.focus();
                input.select();
                validateDisplayName();
            }

            function hideEdit() {
                console.log('Hiding display name edit form');
                edit.classList.add('hidden');
                display.classList.remove('hidden');
                input.value = currentDisplayName;
                errorDisplay.classList.add('hidden');
                errorDisplay.textContent = '';
                saveBtn.disabled = true;
            }

            function validateDisplayName() {
                const displayName = input.value.trim();
                const hasChanged = displayName !== currentDisplayName && displayName.length > 0;
                console.log('Validating display name:', { displayName, currentDisplayName, hasChanged });
                saveBtn.disabled = !hasChanged;
            }

            editBtn.addEventListener('click', showEdit);
            cancelBtn.addEventListener('click', hideEdit);
            input.addEventListener('input', validateDisplayName);

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                console.log('Display name form submitted');
                const newDisplayName = input.value.trim();
                
                if (!newDisplayName) {
                    console.log('Display name is empty');
                    errorDisplay.textContent = 'Display name cannot be empty';
                    errorDisplay.classList.remove('hidden');
                    return;
                }

                console.log('Saving display name:', newDisplayName);
                saveBtn.disabled = true;
                saveBtn.textContent = 'Saving...';

                fetch('/dashboard/account', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ display_name: newDisplayName })
                })
                .then(response => {
                    console.log('Display name response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Display name response data:', data);
                    if (data.success) {
                        currentDisplayName = newDisplayName;
                        document.querySelector('#display-name-display input').value = newDisplayName;
                        hideEdit();
                        toast.show({
                            type: 'success',
                            title: 'Success',
                            message: 'Display name updated successfully'
                        });
                    } else {
                        throw new Error(data.error || 'Failed to update display name');
                    }
                })
                .catch(error => {
                    console.error('Display name error:', error);
                    errorDisplay.textContent = error.message;
                    errorDisplay.classList.remove('hidden');
                })
                .finally(() => {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'Save';
                });
            });
        }

        // Username inline editing
        function initUsernameEditing() {
            console.log('Initializing username editing...');
            const editBtn = document.getElementById('edit-username-btn');
            const display = document.getElementById('username-display');
            const edit = document.getElementById('username-edit');
            const form = document.getElementById('inline-username-form');
            const input = document.getElementById('new-username');
            const cancelBtn = document.getElementById('cancel-username-edit');
            const saveBtn = document.getElementById('save-username-btn');
            const errorDisplay = document.getElementById('username-error');
            let currentUsername = '<%= user.username %>';
            let typingTimer;

            console.log('Username elements found:', {
                editBtn: !!editBtn,
                display: !!display,
                edit: !!edit,
                form: !!form,
                input: !!input,
                cancelBtn: !!cancelBtn,
                saveBtn: !!saveBtn,
                errorDisplay: !!errorDisplay
            });

            function showEdit() {
                console.log('Showing username edit form');
                display.classList.add('hidden');
                edit.classList.remove('hidden');
                input.focus();
                input.select();
                validateUsername();
            }

            function hideEdit() {
                console.log('Hiding username edit form');
                edit.classList.add('hidden');
                display.classList.remove('hidden');
                input.value = currentUsername;
                errorDisplay.classList.add('hidden');
                errorDisplay.textContent = '';
                saveBtn.disabled = true;
            }

            function validateUsername() {
                const username = input.value.toLowerCase().trim();
                const isValid = /^[a-z0-9_-]+$/.test(username);
                const hasChanged = username !== currentUsername;
                
                console.log('Validating username:', { username, currentUsername, isValid, hasChanged });

                if (!username) {
                    errorDisplay.textContent = 'Username cannot be empty';
                    errorDisplay.classList.remove('hidden');
                    saveBtn.disabled = true;
                    return;
                }

                if (!isValid) {
                    errorDisplay.textContent = 'Username can only contain lowercase letters, numbers, underscores and hyphens';
                    errorDisplay.classList.remove('hidden');
                    saveBtn.disabled = true;
                    return;
                }

                if (!hasChanged) {
                    saveBtn.disabled = true;
                    errorDisplay.classList.add('hidden');
                    return;
                }

                // Check if username is available
                clearTimeout(typingTimer);
                typingTimer = setTimeout(() => {
                    console.log('Checking username availability...');
                    fetch('/dashboard/username', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ username, checkOnly: true })
                    })
                    .then(response => {
                        console.log('Username check response status:', response.status);
                        return response.json();
                    })
                    .then(data => {
                        console.log('Username check response data:', data);
                        if (data.available) {
                            errorDisplay.classList.add('hidden');
                            saveBtn.disabled = false;
                        } else {
                            errorDisplay.textContent = 'This username is already taken';
                            errorDisplay.classList.remove('hidden');
                            saveBtn.disabled = true;
                        }
                    })
                    .catch((error) => {
                        console.error('Username check error:', error);
                        errorDisplay.textContent = 'Error checking username availability';
                        errorDisplay.classList.remove('hidden');
                        saveBtn.disabled = true;
                    });
                }, 500);
            }

            editBtn.addEventListener('click', showEdit);
            cancelBtn.addEventListener('click', hideEdit);
            input.addEventListener('input', validateUsername);

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                console.log('Username form submitted');
                const newUsername = input.value.toLowerCase().trim();
                console.log('Saving username:', newUsername);
                saveBtn.disabled = true;
                saveBtn.textContent = 'Saving...';

                fetch('/dashboard/username', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username: newUsername })
                })
                .then(response => {
                    console.log('Username save response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Username save response data:', data);
                    if (data.success) {
                        currentUsername = newUsername;
                        document.querySelector('#username-display input').value = newUsername;
                        document.getElementById('booking-link').value = `isked.app/booking/${newUsername}`;
                        hideEdit();
                        toast.show({
                            type: 'success',
                            title: 'Success',
                            message: 'Username updated successfully'
                        });
                    } else {
                        throw new Error(data.error || 'Failed to update username');
                    }
                })
                .catch(error => {
                    console.error('Username save error:', error);
                    errorDisplay.textContent = error.message;
                    errorDisplay.classList.remove('hidden');
                })
                .finally(() => {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'Save';
                });
            });
        }

        // Meeting Link inline editing
        function initMeetingLinkEditing() {
            const editBtn = document.getElementById('edit-meeting-link-btn');
            const display = document.getElementById('meeting-link-display');
            const edit = document.getElementById('meeting-link-edit');
            const form = edit.querySelector('form');
            const input = document.getElementById('new-meeting-link');
            const cancelBtn = document.getElementById('cancel-meeting-link-edit');
            const saveBtn = document.getElementById('save-meeting-link-btn');
            const errorDisplay = document.getElementById('meeting-link-error');
            let currentMeetingLink = input.value;

            function showEdit() {
                display.classList.add('hidden');
                edit.classList.remove('hidden');
                input.focus();
                input.select();
                validateMeetingLink();
            }

            function hideEdit() {
                edit.classList.add('hidden');
                display.classList.remove('hidden');
                input.value = currentMeetingLink;
                errorDisplay.classList.add('hidden');
                errorDisplay.textContent = '';
                saveBtn.disabled = true;
            }

            function validateMeetingLink() {
                const meetingLink = input.value.trim();
                const hasChanged = meetingLink !== currentMeetingLink;
                saveBtn.disabled = !hasChanged;
            }

            editBtn.addEventListener('click', showEdit);
            cancelBtn.addEventListener('click', hideEdit);
            input.addEventListener('input', validateMeetingLink);

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const newMeetingLink = input.value.trim();
                saveBtn.disabled = true;
                saveBtn.textContent = 'Saving...';

                fetch('/dashboard/account', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ meeting_link: newMeetingLink })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        currentMeetingLink = newMeetingLink;
                        document.querySelector('#meeting-link-display input').value = newMeetingLink;
                        hideEdit();
                        toast.show({
                            type: 'success',
                            title: 'Success',
                            message: 'Meeting link updated successfully'
                        });
                    } else {
                        throw new Error(data.error || 'Failed to update meeting link');
                    }
                })
                .catch(error => {
                    errorDisplay.textContent = error.message;
                    errorDisplay.classList.remove('hidden');
                })
                .finally(() => {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'Save';
                });
            });
        }

        // Google Calendar Integration
        function initGoogleCalendarIntegration() {
            console.log('Initializing Google Calendar integration...');
            
            const connectBtn = document.getElementById('connect-google-calendar-btn');
            const disconnectBtn = document.getElementById('disconnect-google-calendar-btn');
            const settingsDiv = document.getElementById('google-calendar-settings');
            const testSyncBtn = document.getElementById('test-calendar-sync-btn');
            
        // Check connection status on page load
        checkGoogleCalendarStatus();
        
        // Load calendar list when connected
        loadCalendarList();
        
            
            // Connect button click handler
            connectBtn.addEventListener('click', function() {
                console.log('Connect Google Calendar clicked');
                connectBtn.disabled = true;
                connectBtn.textContent = 'Connecting...';
                
                fetch('/dashboard/google-calendar/connect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Redirect to Google OAuth
                        window.location.href = data.authUrl;
                    } else {
                        throw new Error(data.error || 'Failed to initiate connection');
                    }
                })
                .catch(error => {
                    console.error('Connection error:', error);
                    toast.show({
                        type: 'error',
                        title: 'Connection Failed',
                        message: error.message
                    });
                    connectBtn.disabled = false;
                    connectBtn.textContent = 'Connect Google Calendar';
                });
            });
            
            // Disconnect button click handler
            disconnectBtn.addEventListener('click', function() {
                if (confirm('Are you sure you want to disconnect your Google Calendar? This will disable automatic blocking of conflicting times.')) {
                    console.log('Disconnect Google Calendar clicked');
                    disconnectBtn.disabled = true;
                    disconnectBtn.textContent = 'Disconnecting...';
                    
                    fetch('/dashboard/google-calendar/disconnect', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateConnectionStatus(false);
                            toast.show({
                                type: 'success',
                                title: 'Disconnected',
                                message: 'Google Calendar has been disconnected'
                            });
                        } else {
                            throw new Error(data.error || 'Failed to disconnect');
                        }
                    })
                    .catch(error => {
                        console.error('Disconnect error:', error);
                        toast.show({
                            type: 'error',
                            title: 'Disconnect Failed',
                            message: error.message
                        });
                    })
                    .finally(() => {
                        disconnectBtn.disabled = false;
                        disconnectBtn.textContent = 'Disconnect';
                    });
                }
            });
            
            // Test sync button click handler
            testSyncBtn.addEventListener('click', function() {
                console.log('Test calendar sync clicked');
                testSyncBtn.disabled = true;
                testSyncBtn.textContent = 'Testing...';
                
                // Get events for the next 7 days
                const now = new Date();
                const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
                
                fetch(`/dashboard/google-calendar/events?start=${now.toISOString()}&end=${nextWeek.toISOString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const eventCount = data.events.length;
                        toast.show({
                            type: 'success',
                            title: 'Sync Test Successful',
                            message: `Found ${eventCount} event${eventCount !== 1 ? 's' : ''} in the next 7 days`
                        });
                    } else {
                        throw new Error(data.error || 'Failed to test sync');
                    }
                })
                .catch(error => {
                    console.error('Test sync error:', error);
                    toast.show({
                        type: 'error',
                        title: 'Test Failed',
                        message: error.message
                    });
                })
                .finally(() => {
                    testSyncBtn.disabled = false;
                    testSyncBtn.textContent = 'Test Calendar Sync';
                });
            });
        }
        
        function checkGoogleCalendarStatus() {
            console.log('Checking Google Calendar status...');
            
            fetch('/dashboard/google-calendar/status')
            .then(response => response.json())
            .then(data => {
                console.log('Google Calendar status:', data);
                updateConnectionStatus(data.connected);
            })
            .catch(error => {
                console.error('Error checking Google Calendar status:', error);
                updateConnectionStatus(false);
            });
        }
        
    function updateConnectionStatus(connected) {
        const statusIcon = document.getElementById('connection-status-icon');
        const statusText = document.getElementById('connection-status-text');
        const statusDescription = document.getElementById('connection-status-description');
        const connectBtn = document.getElementById('connect-google-calendar-btn');
        const disconnectBtn = document.getElementById('disconnect-google-calendar-btn');
        const settingsDiv = document.getElementById('google-calendar-settings');

        if (connected) {
            // Connected state
            statusIcon.className = 'w-3 h-3 rounded-full bg-green-400';
            statusText.textContent = 'Connected to Google Calendar';
            statusDescription.textContent = 'Your calendar is synced and automatic blocking is enabled';

            connectBtn.classList.add('hidden');
            disconnectBtn.classList.remove('hidden');
            settingsDiv.classList.remove('hidden');
            
            // Load calendar list when connected
            loadCalendarList();
        } else {
            // Disconnected state
            statusIcon.className = 'w-3 h-3 rounded-full bg-gray-300';
            statusText.textContent = 'Not connected to Google Calendar';
            statusDescription.textContent = 'Connect your Google Calendar to enable automatic blocking';

            connectBtn.classList.remove('hidden');
            disconnectBtn.classList.add('hidden');
            settingsDiv.classList.add('hidden');
        }
    }

    function loadCalendarList() {
        console.log('Loading calendar list...');
        
        fetch('/dashboard/google-calendar/list')
        .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Calendars loaded:', data.calendars);
                    populateCalendarDropdown(data.calendars);
                } else {
                console.error('Failed to load calendars:', data.error);
                const select = document.getElementById('calendar-select');
                select.innerHTML = '<option value="">Error loading calendars</option>';
            }
        })
        .catch(error => {
            console.error('Error loading calendar list:', error);
            const select = document.getElementById('calendar-select');
            select.innerHTML = '<option value="">Error loading calendars</option>';
        });
    }

        function populateCalendarDropdown(calendars) {
            const select = document.getElementById('calendar-select');
            select.innerHTML = '';
            
            calendars.forEach(calendar => {
                const option = document.createElement('option');
                option.value = calendar.id;
                option.textContent = calendar.summary + (calendar.primary ? ' (Primary)' : '');
                select.appendChild(option);
            });
            
            // Load selected calendar after populating the dropdown
            loadSelectedCalendar();
            
            // Add change handler
            select.addEventListener('change', function() {
                const selectedCalendarId = this.value;
                console.log('Calendar selection changed to:', selectedCalendarId);
                
                if (selectedCalendarId) {
                    updateSelectedCalendar(selectedCalendarId);
                }
            });
        }

    function loadSelectedCalendar() {
        console.log('Loading selected calendar...');
        
        fetch('/dashboard/google-calendar/selected')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('Selected calendar:', data.calendarId);
                const select = document.getElementById('calendar-select');
                select.value = data.calendarId;
            } else {
                console.error('Failed to load selected calendar:', data.error);
            }
        })
        .catch(error => {
            console.error('Error loading selected calendar:', error);
        });
    }

    function updateSelectedCalendar(calendarId) {
        console.log('Updating selected calendar to:', calendarId);
        
        fetch('/dashboard/google-calendar/select', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ calendarId: calendarId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                toast.show({
                    type: 'success',
                    title: 'Calendar Updated',
                    message: 'New appointments will be synced to the selected calendar'
                });
            } else {
                throw new Error(data.error || 'Failed to update calendar selection');
            }
        })
        .catch(error => {
            console.error('Error updating calendar selection:', error);
            toast.show({
                type: 'error',
                title: 'Update Failed',
                message: error.message
            });
        });
    }

    function loadBlockingSetting() {
        console.log('Loading Google Calendar blocking setting...');
        
        fetch('/dashboard/google-calendar/blocking-setting')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('Blocking setting loaded:', data.blockingEnabled);
                const checkbox = document.getElementById('google-calendar-blocking-enabled');
                checkbox.checked = data.blockingEnabled;
                
                // Add change handler
                checkbox.addEventListener('change', function() {
                    updateBlockingSetting(this.checked);
                });
            } else {
                console.error('Failed to load blocking setting:', data.error);
            }
        })
        .catch(error => {
            console.error('Error loading blocking setting:', error);
        });
    }

    function updateBlockingSetting(blockingEnabled) {
        console.log('Updating blocking setting to:', blockingEnabled);
        
        fetch('/dashboard/google-calendar/update-blocking', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ blockingEnabled: blockingEnabled })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                toast.show({
                    type: 'success',
                    title: 'Setting Updated',
                    message: blockingEnabled ? 
                        'Google Calendar blocking is now enabled' : 
                        'Google Calendar blocking is now disabled'
                });
            } else {
                throw new Error(data.error || 'Failed to update blocking setting');
            }
        })
        .catch(error => {
            console.error('Error updating blocking setting:', error);
            toast.show({
                type: 'error',
                title: 'Update Failed',
                message: error.message
            });
            
            // Revert checkbox state
            const checkbox = document.getElementById('google-calendar-blocking-enabled');
            checkbox.checked = !blockingEnabled;
        });
        }

        // Handle availability success message
        function handleAvailabilitySuccess() {
            const urlParams = new URLSearchParams(window.location.search);
            const success = urlParams.get('success');
            
            if (success === 'availability_saved') {
                toast.show({
                    type: 'success',
                    title: 'Success',
                    message: 'Availability settings saved successfully!'
                });
                
                // Clean up URL
                const url = new URL(window.location);
                url.searchParams.delete('success');
                window.history.replaceState({}, '', url);
            }
        }

        // Initialize availability settings functionality
        function initAvailabilitySettings() {
            console.log('Initializing availability settings...');
            
            // Handle working days checkboxes
            const dayCheckboxes = document.querySelectorAll('input[name="working_days"]');
            dayCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const dayRow = this.closest('.flex');
                    const startTime = dayRow.querySelector('.work-start');
                    const endTime = dayRow.querySelector('.work-end');
                    
                    if (this.checked) {
                        startTime.disabled = false;
                        endTime.disabled = false;
                    } else {
                        startTime.disabled = true;
                        endTime.disabled = true;
                    }
                });
            });

            // Handle break time checkbox
            const breakCheckbox = document.getElementById('break-enabled');
            const breakStart = document.getElementById('break-start');
            const breakEnd = document.getElementById('break-end');
            
            breakCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    breakStart.disabled = false;
                    breakEnd.disabled = false;
                } else {
                    breakStart.disabled = true;
                    breakEnd.disabled = true;
                }
            });

            // Handle form submission - use traditional form POST
            const availabilityForm = document.getElementById('availability-form');
            availabilityForm.addEventListener('submit', function(e) {
                console.log('Availability form submitted');
                
                const submitBtn = this.querySelector('button[type="submit"]');
                submitBtn.disabled = true;
                submitBtn.textContent = 'Saving...';
                
                // Clear existing hidden inputs
                const hiddenInputs = document.getElementById('hidden-inputs');
                hiddenInputs.innerHTML = '';
                
                // Add hidden inputs for working hours
                const workingDays = Array.from(document.querySelectorAll('input[name="working_days"]:checked'));
                workingDays.forEach(checkbox => {
                    const dayIndex = checkbox.value;
                    const dayRow = checkbox.closest('.flex.flex-col');
                    const startTime = dayRow ? dayRow.querySelector('.work-start') : null;
                    const endTime = dayRow ? dayRow.querySelector('.work-end') : null;
                    
                    if (startTime && endTime) {
                        const startInput = document.createElement('input');
                        startInput.type = 'hidden';
                        startInput.name = `day_${dayIndex}_start`;
                        startInput.value = startTime.value;
                        hiddenInputs.appendChild(startInput);
                        
                        const endInput = document.createElement('input');
                        endInput.type = 'hidden';
                        endInput.name = `day_${dayIndex}_end`;
                        endInput.value = endTime.value;
                        hiddenInputs.appendChild(endInput);
                    }
                });
                
                // Add hidden input for buffer minutes
                const bufferInput = document.createElement('input');
                bufferInput.type = 'hidden';
                bufferInput.name = 'buffer_minutes';
                bufferInput.value = document.getElementById('buffer-minutes').value;
                hiddenInputs.appendChild(bufferInput);
                
                // Add hidden input for break enabled
                const breakEnabledInput = document.createElement('input');
                breakEnabledInput.type = 'hidden';
                breakEnabledInput.name = 'break_enabled';
                breakEnabledInput.value = document.getElementById('break-enabled').checked;
                hiddenInputs.appendChild(breakEnabledInput);
                
                // Add hidden inputs for break times
                const breakStartInput = document.createElement('input');
                breakStartInput.type = 'hidden';
                breakStartInput.name = 'break_start';
                breakStartInput.value = document.getElementById('break-start').value;
                hiddenInputs.appendChild(breakStartInput);
                
                const breakEndInput = document.createElement('input');
                breakEndInput.type = 'hidden';
                breakEndInput.name = 'break_end';
                breakEndInput.value = document.getElementById('break-end').value;
                hiddenInputs.appendChild(breakEndInput);
                
                // Let the form submit naturally - no preventDefault
                // The server will handle the POST request and redirect back
            });
            
            // Load existing availability settings from embedded data
            loadAvailabilitySettingsFromData();
        }

        // Load existing availability settings from embedded data
        function loadAvailabilitySettingsFromData() {
            console.log('🔄 Loading availability settings from embedded data...');
            
            // Get the embedded availability settings
            const data = <%- JSON.stringify(availabilitySettings || {}) %>;
            console.log('📊 Embedded availability data:', data);
            console.log('📊 Working days array:', data.working_days);
            console.log('📊 Working days type:', typeof data.working_days);
            console.log('📊 Working days length:', data.working_days ? data.working_days.length : 'undefined');
            
            if (data && Object.keys(data).length > 0) {
                console.log('✅ Loading availability settings:', data);
                
                // Set working days
                if (data.working_days && data.working_days.length > 0) {
                    console.log('📅 Setting working days:', data.working_days);
                    data.working_days.forEach(dayIndex => {
                        const checkbox = document.getElementById(`day-${dayIndex}`);
                        console.log(`🔍 Looking for day-${dayIndex}, found:`, checkbox);
                        if (checkbox) {
                            checkbox.checked = true;
                            checkbox.dispatchEvent(new Event('change'));
                            
                            // Set working hours - find the parent row and then the time inputs
                            const dayRow = checkbox.closest('.flex.flex-col');
                            console.log(`🔍 Day row for day-${dayIndex}:`, dayRow);
                            const startTime = dayRow ? dayRow.querySelector('.work-start') : null;
                            const endTime = dayRow ? dayRow.querySelector('.work-end') : null;
                            console.log(`🔍 Start time for day-${dayIndex}:`, startTime);
                            console.log(`🔍 End time for day-${dayIndex}:`, endTime);
                            
                            if (data[`day_${dayIndex}_start`] && startTime) {
                                startTime.value = data[`day_${dayIndex}_start`];
                            }
                            if (data[`day_${dayIndex}_end`] && endTime) {
                                endTime.value = data[`day_${dayIndex}_end`];
                            }
                        }
                    });
                }
                
                // Set break settings
                if (data.break_enabled) {
                    console.log('☕ Setting break settings, enabled:', data.break_enabled);
                    const breakCheckbox = document.getElementById('break-enabled');
                    console.log('🔍 Found break checkbox:', breakCheckbox);
                    if (breakCheckbox) {
                        breakCheckbox.checked = true;
                        breakCheckbox.dispatchEvent(new Event('change'));
                        
                        if (data.break_start) {
                            document.getElementById('break-start').value = data.break_start;
                        }
                        if (data.break_end) {
                            document.getElementById('break-end').value = data.break_end;
                        }
                    }
                }
                
                // Set buffer minutes
                if (data.buffer_minutes !== undefined) {
                    console.log('⏱️ Setting buffer minutes:', data.buffer_minutes);
                    const bufferSelect = document.getElementById('buffer-minutes');
                    console.log('🔍 Found buffer select:', bufferSelect);
                    if (bufferSelect) {
                        bufferSelect.value = data.buffer_minutes;
                    }
                }
            } else {
                console.log('ℹ️ No availability settings found in embedded data');
            }
        }

        // Load existing availability settings
        function loadAvailabilitySettings() {
            console.log('🔄 Loading availability settings...');
            fetch('/settings/availability', {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => {
                    console.log('📡 Response status:', response.status);
                    console.log('📡 Response headers:', response.headers);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('📊 Received data:', data);
                    if (data.success) {
                        console.log('✅ Loading availability settings:', data);
                        
                        // Set working days
                        if (data.working_days) {
                            console.log('📅 Setting working days:', data.working_days);
                            data.working_days.forEach(dayIndex => {
                                const checkbox = document.getElementById(`day-${dayIndex}`);
                                console.log(`🔍 Looking for day-${dayIndex}, found:`, checkbox);
                                if (checkbox) {
                                    checkbox.checked = true;
                                    checkbox.dispatchEvent(new Event('change'));
                                    
                                    // Set working hours
                                    const dayRow = checkbox.closest('.flex');
                                    const startTime = dayRow.querySelector('.work-start');
                                    const endTime = dayRow.querySelector('.work-end');
                                    
                                    if (data[`day_${dayIndex}_start`]) {
                                        startTime.value = data[`day_${dayIndex}_start`];
                                    }
                                    if (data[`day_${dayIndex}_end`]) {
                                        endTime.value = data[`day_${dayIndex}_end`];
                                    }
                                }
                            });
                        }
                        
                        // Set break settings
                        if (data.break_enabled) {
                            console.log('☕ Setting break settings, enabled:', data.break_enabled);
                            const breakCheckbox = document.getElementById('break-enabled');
                            console.log('🔍 Found break checkbox:', breakCheckbox);
                            if (breakCheckbox) {
                                breakCheckbox.checked = true;
                                breakCheckbox.dispatchEvent(new Event('change'));
                                
                                if (data.break_start) {
                                    document.getElementById('break-start').value = data.break_start;
                                }
                                if (data.break_end) {
                                    document.getElementById('break-end').value = data.break_end;
                                }
                            }
                        }
                        
                        // Set buffer minutes
                        if (data.buffer_minutes !== undefined) {
                            console.log('⏱️ Setting buffer minutes:', data.buffer_minutes);
                            const bufferSelect = document.getElementById('buffer-minutes');
                            console.log('🔍 Found buffer select:', bufferSelect);
                            if (bufferSelect) {
                                bufferSelect.value = data.buffer_minutes;
                            }
                        }
                    } else {
                        console.error('Failed to load availability settings:', data.error);
                    }
                })
                .catch(error => {
                    console.error('❌ Error loading availability settings:', error);
                    console.error('❌ Error details:', {
                        message: error.message,
                        stack: error.stack,
                        name: error.name
                    });
                });
        }
    </script>
</body>
</html> 