<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>isked - Contacts</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="/css/toast.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="/js/toast.js" defer></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .referral-stars {
            color: #F59E0B;
        }
        .status-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-weight: 500;
        }
        .status-new-lead { background-color: #FEF3C7; color: #92400E; }
        .status-qualified-lead { background-color: #DBEAFE; color: #1E40AF; }
        .status-warm-prospect { background-color: #F3E8FF; color: #7C3AED; }
        .status-hot-prospect { background-color: #FEE2E2; color: #DC2626; }
        .status-active-client { background-color: #D1FAE5; color: #059669; }
        .status-bni-member { background-color: #E0F2FE; color: #0369A1; }
        .status-inactive { background-color: #F3F4F6; color: #6B7280; }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Navigation -->
    <%- include('partials/navigation', { currentPage: 'contacts', user: user }) %>

    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Contacts</h1>
                    <p class="text-sm text-gray-600 mt-1">Manage your business relationships and referrals</p>
                </div>
                <button id="add-contact-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center">
                    <svg class="w-4 h-4 sm:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    <span class="hidden sm:inline">Add Contact</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">Total Contacts</p>
                        <p id="total-contacts" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">New Leads</p>
                        <p id="new-leads" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">Qualified Leads</p>
                        <p id="qualified-leads" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">Hot Prospect</p>
                        <p id="hot-prospect" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">Follow-ups Due</p>
                        <p id="follow-ups" class="text-2xl font-semibold text-gray-900">0</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Contacts Table -->
        <div class="bg-white rounded-lg shadow">
            <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                <div class="flex flex-col space-y-4">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-medium text-gray-900">All Contacts</h3>
                    </div>
                    
                    <!-- Search and Filters -->
                    <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3">
                        <!-- Search Input -->
                        <div class="relative flex-1">
                            <input type="text" id="search-contacts" placeholder="Search contacts..." 
                                   class="pl-10 pr-10 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent w-full">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                </svg>
                            </div>
                            <button id="clear-search-contacts" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 hidden">
                                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>
                        
                        <!-- Filters -->
                        <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2 sm:flex-shrink-0">
                            <select id="status-filter" class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="all">All Status</option>
                                <option value="new_lead">New Lead</option>
                                <option value="qualified_lead">Qualified Lead</option>
                                <option value="warm_prospect">Warm Prospect</option>
                                <option value="hot_prospect">Hot Prospect</option>
                            </select>
                            <select id="followup-filter" class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="all">All</option>
                                <option value="overdue">Overdue</option>
                                <option value="due_today">Due Today</option>
                                <option value="due_this_week">Due This Week</option>
                                <option value="due_future">Future Follow-ups</option>
                                <option value="no_followup">No Follow-up Set</option>
                            </select>
                            <select id="sort-contacts" class="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="name">Sort by Name</option>
                                <option value="company">Sort by Company</option>
                                <option value="status">Sort by Status</option>
                                <option value="referral_potential">Sort by Referral Potential</option>
                                <option value="next_follow_up">Sort by Follow-up Date</option>
                                <option value="created_at">Sort by Date Added</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="hidden sm:table-cell px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company</th>
                            <th class="hidden md:table-cell px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="hidden lg:table-cell px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Referral Potential</th>
                            <th class="hidden lg:table-cell px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Contact</th>
                            <th class="hidden xl:table-cell px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Next Follow-up</th>
                            <th class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="contacts-table-body" class="bg-white divide-y divide-gray-200">
                        <!-- Contacts will be loaded here -->
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination Container -->
            <div id="pagination-container">
                <!-- Pagination will be rendered here -->
            </div>
        </div>
    </div>

    <!-- Add Contact Modal -->
    <div id="add-contact-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50 overflow-y-auto">
        <div class="flex items-start justify-center min-h-screen p-4 py-8">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full my-8">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Add New Contact</h3>
                </div>
                <form id="add-contact-form" class="px-6 py-4 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Name *</label>
                        <input type="text" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="email" name="email" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                        <input type="tel" name="phone" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Company</label>
                        <input type="text" name="company" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Position</label>
                        <input type="text" name="position" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Industry</label>
                        <input type="text" name="industry" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select name="status" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="new_lead">New Lead</option>
                            <option value="qualified_lead">Qualified Lead</option>
                            <option value="warm_prospect">Warm Prospect</option>
                            <option value="hot_prospect">Hot Prospect</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">BNI Member</label>
                        <div class="flex items-center space-x-2">
                            <input type="checkbox" name="bni_member" value="true" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="text-sm text-gray-700">Yes</span>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">BNI Chapter</label>
                        <input type="text" name="bni_chapter" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="e.g., BNI Manila">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Referral Potential</label>
                        <select name="referral_potential" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="1">1 - Cold</option>
                            <option value="2">2 - Warm</option>
                            <option value="3">3 - Good</option>
                            <option value="4">4 - Hot</option>
                            <option value="5">5 - Fire</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                        <textarea name="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-add-contact" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" form="add-contact-form" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        Add Contact
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Contact Confirmation Modal -->
    <div id="delete-contact-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Delete Contact</h3>
                </div>
                <div class="px-6 py-4">
                    <div class="flex items-center mb-4">
                        <div class="flex-shrink-0">
                            <div class="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-3">
                            <p id="delete-contact-message" class="text-sm text-gray-500">Are you sure you want to delete this contact?</p>
                        </div>
                    </div>
                </div>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-delete-contact" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="button" id="confirm-delete-contact" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                        Yes, Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let contacts = [];
        let filteredContacts = [];
        let currentPage = 1;
        let totalPages = 1;
        let totalContacts = 0;
        let currentSearch = '';
        let currentStatus = 'all';
        let currentSort = 'name';
        let currentLimit = 20;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Get pagination parameters from URL
            const urlParams = new URLSearchParams(window.location.search);
            currentPage = parseInt(urlParams.get('page')) || 1;
            currentSearch = urlParams.get('search') || '';
            currentStatus = urlParams.get('status') || 'all';
            currentSort = urlParams.get('sort') || 'name';
            currentLimit = parseInt(urlParams.get('limit')) || 20;
            
            loadContacts();
            loadStats();
            initializeEventListeners();
            
        });

        // Toast notifications are available globally via /js/toast.js

        // Load contacts from API
        async function loadContacts() {
            try {
                // Build query parameters
                const params = new URLSearchParams();
                if (currentSearch) params.append('search', currentSearch);
                if (currentStatus !== 'all') params.append('status', currentStatus);
                if (currentSort) params.append('sort', currentSort);
                params.append('page', currentPage);
                params.append('limit', currentLimit);
                
                // Add cache-busting parameter to ensure fresh data
                const timestamp = new Date().getTime();
                params.append('t', timestamp);
                
                const response = await fetch(`/crm/?${params.toString()}`, {
                    cache: 'no-cache',
                    headers: {
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    }
                });
                const data = await response.json();
                
                if (data.success) {
                    contacts = data.contacts;
                    filteredContacts = [...contacts];
                    totalPages = data.pagination.totalPages;
                    totalContacts = data.pagination.totalContacts;
                    renderContacts();
                    renderPagination();
                } else {
                    console.error('Failed to load contacts:', data.error);
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
            }
        }

        // Load stats from API
        async function loadStats() {
            try {
                const response = await fetch('/crm/stats/dashboard');
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('total-contacts').textContent = data.stats.totalContacts;
                    
                    // Count new leads
                    const newLeads = data.stats.statusBreakdown.find(s => s.status === 'new_lead');
                    document.getElementById('new-leads').textContent = newLeads ? newLeads.count : 0;
                    
                    // Count qualified leads
                    const qualifiedLeads = data.stats.statusBreakdown.find(s => s.status === 'qualified_lead');
                    document.getElementById('qualified-leads').textContent = qualifiedLeads ? qualifiedLeads.count : 0;
                    
                    // Count hot prospects
                    const hotProspects = data.stats.statusBreakdown.find(s => s.status === 'hot_prospect');
                    document.getElementById('hot-prospect').textContent = hotProspects ? hotProspects.count : 0;
                    
                    document.getElementById('follow-ups').textContent = data.stats.followUpsDue;
                }
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Render contacts table
        function renderContacts() {
            const tbody = document.getElementById('contacts-table-body');
            tbody.innerHTML = '';

            if (filteredContacts.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-6 py-8 text-center text-gray-500">
                            No contacts found. <button class="text-blue-600 hover:text-blue-800" onclick="showAddContactModal()">Add your first contact</button>
                        </td>
                    </tr>
                `;
                return;
            }

            filteredContacts.forEach(contact => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                
                const referralStars = '★'.repeat(contact.referral_potential) + '☆'.repeat(5 - contact.referral_potential);
                const lastContact = contact.last_contact_date ? new Date(contact.last_contact_date).toLocaleDateString() : 'Never';
                
                row.innerHTML = `
                    <td class="px-4 sm:px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 h-10 w-10">
                                <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                                    <span class="text-sm font-medium text-blue-600">${contact.name.charAt(0).toUpperCase()}</span>
                                </div>
                            </div>
                            <div class="ml-4">
                                <div class="text-sm font-medium text-gray-900">${contact.name}</div>
                                <div class="text-sm text-gray-500">${contact.email || 'No email'}</div>
                                ${contact.bni_chapter ? `<div class="text-xs text-blue-600">${contact.bni_chapter}</div>` : ''}
                                <!-- Show company on mobile -->
                                <div class="sm:hidden mt-1">
                                    <div class="text-sm text-gray-900">${contact.company || '—'}</div>
                                    <div class="text-sm text-gray-500">${contact.position || '—'}</div>
                                    ${contact.industry ? `<div class="text-xs text-gray-600">${contact.industry}</div>` : ''}
                                </div>
                                <!-- Show status on mobile -->
                                <div class="md:hidden mt-1">
                                    <span class="status-badge status-${contact.status.replace('_', '-')}">${formatStatus(contact.status)}</span>
                                </div>
                                <!-- Show referral potential on mobile -->
                                <div class="lg:hidden mt-1">
                                    <div class="flex items-center">
                                        <span class="referral-stars text-sm">${referralStars}</span>
                                        <span class="ml-1 text-xs text-gray-500">(${contact.referral_potential}/5)</span>
                                    </div>
                                </div>
                                <!-- Show follow-up on mobile -->
                                <div class="xl:hidden mt-1">
                                    ${getFollowUpBadge(contact.next_follow_up)}
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="hidden sm:table-cell px-4 sm:px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">${contact.company || '—'}</div>
                        <div class="text-sm text-gray-500">${contact.position || '—'}</div>
                        ${contact.industry ? `<div class="text-xs text-gray-600">${contact.industry}</div>` : ''}
                    </td>
                    <td class="hidden md:table-cell px-4 sm:px-6 py-4 whitespace-nowrap">
                        <span class="status-badge status-${contact.status.replace('_', '-')}">${formatStatus(contact.status)}</span>
                    </td>
                    <td class="hidden lg:table-cell px-4 sm:px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <span class="referral-stars text-lg">${referralStars}</span>
                            <span class="ml-2 text-sm text-gray-500">(${contact.referral_potential}/5)</span>
                        </div>
                    </td>
                    <td class="hidden lg:table-cell px-4 sm:px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${lastContact}
                    </td>
                    <td class="hidden xl:table-cell px-4 sm:px-6 py-4 whitespace-nowrap text-sm">
                        ${getFollowUpBadge(contact.next_follow_up)}
                    </td>
                    <td class="px-4 sm:px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div class="flex space-x-2 sm:space-x-3">
                            <button onclick="viewContact(${contact.id})" class="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50" title="View Contact">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                </svg>
                            </button>
                            <button onclick="deleteContact(${contact.id})" class="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50" title="Delete Contact">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </div>
                    </td>
                `;
                
                tbody.appendChild(row);
            });
        }

        // Format status for display
        function formatStatus(status) {
            const statusMap = {
                'new_lead': 'New Lead',
                'qualified_lead': 'Qualified Lead',
                'warm_prospect': 'Warm Prospect',
                'hot_prospect': 'Hot Prospect',
                'active_client': 'Active Client',
                'bni_member': 'BNI Member',
                'inactive': 'Inactive'
            };
            return statusMap[status] || status;
        }

        // Format follow-up date with color-coded badge
        function getFollowUpBadge(nextFollowUp) {
            if (!nextFollowUp) {
                return '<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-600">Not set</span>';
            }

            // Parse the follow-up date string directly to avoid timezone issues
            // Handle both formats: "2025-10-16T16:00:00.000Z" and "2025-10-17"
            const followUpDateStr = nextFollowUp.includes('T') ? nextFollowUp.split('T')[0] : nextFollowUp;
            const [year, month, day] = followUpDateStr.split('-').map(Number);
            
            // Create date objects in local timezone
            const followUpDate = new Date(year, month - 1, day);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            followUpDate.setHours(0, 0, 0, 0);

            const diffTime = followUpDate.getTime() - today.getTime();
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

            const dateStr = followUpDate.toLocaleDateString();
            


            if (diffDays < 0) {
                // Overdue
                return `<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                    </svg>
                    Overdue ${Math.abs(diffDays)}d
                </span>`;
            } else if (diffDays === 0) {
                // Due today
                return `<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                    </svg>
                    Due Today
                </span>`;
            } else if (diffDays <= 7) {
                // Due this week
                return `<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                    </svg>
                    In ${diffDays}d
                </span>`;
            } else {
                // Future follow-up
                return `<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                    </svg>
                    ${dateStr}
                </span>`;
            }
        }

        // Initialize event listeners
        function initializeEventListeners() {
            // Add contact button
            document.getElementById('add-contact-btn').addEventListener('click', showAddContactModal);
            
            // Cancel add contact
            document.getElementById('cancel-add-contact').addEventListener('click', hideAddContactModal);
            
            // Add contact form
            document.getElementById('add-contact-form').addEventListener('submit', handleAddContact);
            
            // Delete contact buttons
            document.getElementById('cancel-delete-contact').addEventListener('click', hideDeleteContactModal);
            document.getElementById('confirm-delete-contact').addEventListener('click', confirmDeleteContact);
            
            // Search
            document.getElementById('search-contacts').addEventListener('input', handleSearch);
            document.getElementById('clear-search-contacts').addEventListener('click', clearSearch);
            
            // Filters
            document.getElementById('status-filter').addEventListener('change', handleFilter);
            document.getElementById('followup-filter').addEventListener('change', handleFollowUpFilter);
            document.getElementById('sort-contacts').addEventListener('change', handleSort);
            
            // Set initial values from URL parameters
            const searchInput = document.getElementById('search-contacts');
            const clearButton = document.getElementById('clear-search-contacts');
            const statusFilter = document.getElementById('status-filter');
            const sortSelect = document.getElementById('sort-contacts');
            
            if (searchInput && currentSearch) {
                searchInput.value = currentSearch;
                clearButton.classList.remove('hidden');
            }
            
            if (statusFilter && currentStatus !== 'all') {
                statusFilter.value = currentStatus;
            }
            
            if (sortSelect && currentSort) {
                sortSelect.value = currentSort;
            }
        }

        // Show add contact modal
        function showAddContactModal() {
            document.getElementById('add-contact-modal').classList.remove('hidden');
        }

        // Hide add contact modal
        function hideAddContactModal() {
            document.getElementById('add-contact-modal').classList.add('hidden');
            document.getElementById('add-contact-form').reset();
        }
        
        // Hide delete contact modal
        function hideDeleteContactModal() {
            document.getElementById('delete-contact-modal').classList.add('hidden');
        }

        // Handle add contact form submission
        async function handleAddContact(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const contactData = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch('/crm/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(contactData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    hideAddContactModal();
                    loadContacts();
                    loadStats();
                    toast.show({
                        type: 'success',
                        title: 'Contact added!',
                        message: `${contactData.name} has been added to your contacts.`
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to add contact'
                    });
                }
            } catch (error) {
                console.error('Error adding contact:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to add contact'
                });
            }
        }
        
        // Handle search
        function handleSearch(e) {
            const searchTerm = e.target.value.trim();
            const clearButton = document.getElementById('clear-search-contacts');
            
            // Show/hide clear button based on search input
            if (searchTerm) {
                clearButton.classList.remove('hidden');
            } else {
                clearButton.classList.add('hidden');
            }
            
            // Update current search and reset to page 1
            currentSearch = searchTerm;
            currentPage = 1;
            
            // Reload contacts with new search parameters
            loadContacts();
        }

        // Clear search
        function clearSearch() {
            const searchInput = document.getElementById('search-contacts');
            const clearButton = document.getElementById('clear-search-contacts');
            
            searchInput.value = '';
            clearButton.classList.add('hidden');
            
            // Reset search and go to page 1
            currentSearch = '';
            currentPage = 1;
            
            // Reload contacts
            loadContacts();
        }

        // Handle filter
        function handleFilter(e) {
            const status = e.target.value;
            
            // Update current status and reset to page 1
            currentStatus = status;
            currentPage = 1;
            
            // Reload contacts with new filter
            loadContacts();
        }

        // Handle follow-up filter
        function handleFollowUpFilter(e) {
            const followUpFilter = e.target.value;
            if (followUpFilter === 'all') {
                filteredContacts = [...contacts];
            } else {
                filteredContacts = contacts.filter(contact => {
                    // Handle contacts with no follow-up date
                    if (!contact.next_follow_up) {
                        return followUpFilter === 'no_followup';
                    }

                    // Skip contacts with no follow-up when filtering for other categories
                    if (followUpFilter !== 'no_followup' && !contact.next_follow_up) {
                        return false;
                    }

                    // Parse the follow-up date string directly to avoid timezone issues
                    // Handle both formats: "2025-10-16T16:00:00.000Z" and "2025-10-17"
                    const followUpDateStr = contact.next_follow_up.includes('T') ? contact.next_follow_up.split('T')[0] : contact.next_follow_up;
                    const [year, month, day] = followUpDateStr.split('-').map(Number);
                    
                    // Create date objects in local timezone
                    const followUpDate = new Date(year, month - 1, day);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    followUpDate.setHours(0, 0, 0, 0);

                    const diffTime = followUpDate.getTime() - today.getTime();
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));


                    switch (followUpFilter) {
                        case 'overdue':
                            return diffDays < 0;
                        case 'due_today':
                            return diffDays === 0;
                        case 'due_this_week':
                            return diffDays > 0 && diffDays <= 7;
                        case 'due_future':
                            return diffDays > 0; // Include tomorrow and all future dates
                        case 'no_followup':
                            return !contact.next_follow_up;
                        default:
                            return true;
                    }
                });
            }
            renderContacts();
        }

        // Handle sort
        function handleSort(e) {
            const sortBy = e.target.value;
            
            // Update current sort and reset to page 1
            currentSort = sortBy;
            currentPage = 1;
            
            // Reload contacts with new sort
            loadContacts();
        }

        // Render pagination controls
        function renderPagination() {
            const paginationContainer = document.getElementById('pagination-container');
            if (!paginationContainer) return;
            
            if (totalPages <= 1) {
                paginationContainer.innerHTML = '';
                return;
            }
            
            let paginationHTML = `
                <div class="px-6 py-4 border-t border-gray-200">
                    <div class="flex items-center justify-between">
                        <div class="text-sm text-gray-700">
                            Showing page ${currentPage} of ${totalPages} 
                            (${totalContacts} total contacts)
                        </div>
                        <div class="flex space-x-2">
            `;
            
            // Previous button
            if (currentPage > 1) {
                const prevParams = buildPaginationParams(currentPage - 1);
                paginationHTML += `
                    <a href="?${prevParams}" class="px-3 py-2 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50">
                        Previous
                    </a>
                `;
            }
            
            // Next button
            if (currentPage < totalPages) {
                const nextParams = buildPaginationParams(currentPage + 1);
                paginationHTML += `
                    <a href="?${nextParams}" class="px-3 py-2 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50">
                        Next
                    </a>
                `;
            }
            
            paginationHTML += `
                        </div>
                    </div>
                </div>
            `;
            
            paginationContainer.innerHTML = paginationHTML;
        }
        
        // Build pagination parameters for URL
        function buildPaginationParams(page) {
            const params = new URLSearchParams();
            if (currentSearch) params.append('search', currentSearch);
            if (currentStatus !== 'all') params.append('status', currentStatus);
            if (currentSort) params.append('sort', currentSort);
            if (currentLimit !== 20) params.append('limit', currentLimit);
            params.append('page', page);
            return params.toString();
        }

        // View contact
        function viewContact(id) {
            window.location.href = `/contacts/${id}`;
        }

        // Delete contact
        function deleteContact(id) {
            const contact = contacts.find(c => c.id === id);
            if (!contact) {
                console.error('Contact not found');
                return;
            }
            
            // Store the contact ID for the delete action
            document.getElementById('confirm-delete-contact').dataset.contactId = id;
            
            // Update the confirmation message
            document.getElementById('delete-contact-message').textContent = 
                `Are you sure you want to delete "${contact.name}"? This action cannot be undone.`;
            
            // Show the delete confirmation modal
            document.getElementById('delete-contact-modal').classList.remove('hidden');
        }
        
        // Confirm delete contact
        async function confirmDeleteContact() {
            const contactId = document.getElementById('confirm-delete-contact').dataset.contactId;
            
            try {
                const response = await fetch(`/crm/${contactId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    hideDeleteContactModal();
                    loadContacts();
                    loadStats();
                    toast.show({
                        type: 'success',
                        title: 'Contact deleted!',
                        message: 'The contact has been removed.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to delete contact'
                    });
                }
            } catch (error) {
                console.error('Error deleting contact:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to delete contact'
                });
            }
        }
    </script>
</body>
</html>