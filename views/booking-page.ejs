<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book an Appointment with <%= user.display_name || user.full_name || user.username %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="max-w-3xl mx-auto px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="mb-8">
                <h1 class="text-xl font-semibold text-gray-900 text-left">
                    Book an appointment with <%= user.display_name || user.full_name || user.username %>
                </h1>
                <p class="text-gray-600 text-sm mt-1">Select your preferred date and time below</p>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Date and Time Selection -->
                <div>
                    <h2 class="text-lg font-semibold mb-4">Select Date & Time</h2>
                    
                    <div class="mb-4">
                        <label class="block text-gray-700 text-sm font-bold mb-2" for="date">
                            Date
                        </label>
                        <input type="text" id="date-picker" class="w-full border rounded px-3 py-2" placeholder="Select date">
                    </div>

                    <div class="mb-4">
                        <label class="block text-gray-700 text-sm font-bold mb-2">
                            Available Time Slots
                        </label>
                        <div id="time-slots" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
                            <!-- Time slots will be populated dynamically -->
                        </div>
                        <p id="no-slots" class="text-gray-500 text-center py-4 hidden">No available time slots for this date.</p>
                    </div>
                </div>

                <!-- Booking Form -->
                <div>
                    <h2 class="text-lg font-semibold mb-4">Your Information</h2>
                    
                    <form id="booking-form" class="space-y-4">
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="name">
                                Full Name *
                            </label>
                            <input type="text" id="name" name="name" required
                                class="w-full border rounded px-3 py-2">
                        </div>

                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="email">
                                Email *
                            </label>
                            <input type="email" id="email" name="email" required
                                class="w-full border rounded px-3 py-2">
                        </div>

                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="phone">
                                Phone Number
                            </label>
                            <input type="tel" id="phone" name="phone"
                                class="w-full border rounded px-3 py-2">
                        </div>

                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="notes">
                                Notes
                            </label>
                            <textarea id="notes" name="notes" rows="3"
                                class="w-full border rounded px-3 py-2"></textarea>
                        </div>

                        <button type="submit" 
                            class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Book Appointment
                        </button>
                    </form>
                </div>
            </div>
            <!-- Footer inside the white box -->
            <footer class="text-left py-6 text-gray-600">
                Made by <a href="https://isked.app/" class="text-blue-600 hover:text-blue-800 font-medium">isked</a>
            </footer>
        </div>
    </div>

    <script>
        let selectedDate = null;
        let selectedTime = null;

        // Initialize date picker
        flatpickr("#date-picker", {
            minDate: "today",
            dateFormat: "Y-m-d",
            onChange: function(selectedDates) {
                if (selectedDates.length > 0) {
                    const date = selectedDates[0];
                    // Format the date as YYYY-MM-DD in local timezone
                    selectedDate = date.getFullYear() + '-' + 
                        String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                        String(date.getDate()).padStart(2, '0');
                    // console.log('Selected date (local):', selectedDate);
                    loadTimeSlots();
                }
            }
        });

        // Generate time slots in 1-hour intervals
        function generateTimeSlots(startTime, endTime, breaks, bookings) {
            const slots = [];
            const baseDate = new Date(selectedDate);
            const start = new Date(baseDate);
            start.setHours(parseInt(startTime.split(':')[0]), parseInt(startTime.split(':')[1]));
            
            const end = new Date(baseDate);
            end.setHours(parseInt(endTime.split(':')[0]), parseInt(endTime.split(':')[1]));
            
            // console.log('Generating slots:', {
            //     selectedDate,
            //     startTime,
            //     endTime,
            //     localStart: start.toLocaleString(),
            //     localEnd: end.toLocaleString()
            // });

            // Function to convert time to AM/PM format
            function convertTo12Hour(time) {
                const [hours, minutes] = time.split(':');
                const hour = parseInt(hours);
                const ampm = hour >= 12 ? 'PM' : 'AM';
                const hour12 = hour % 12 || 12;
                return `${hour12}:${minutes} ${ampm}`;
            }
            
            // Function to check if a time is within break time
            function isBreakTime(time) {
                if (!breaks || breaks.length === 0) return false;
                const timeStr = time.toTimeString().slice(0, 5);
                return breaks.some(b => {
                    const breakStart = convertTo24Hour(b.start_time);
                    const breakEnd = convertTo24Hour(b.end_time);
                    return timeStr >= breakStart && timeStr < breakEnd;
                });
            }

            // Function to check if a time slot is booked
            function isBooked(time) {
                if (!bookings || bookings.length === 0) return false;
                const timeStr = time.toTimeString().slice(0, 5);
                return bookings.some(b => {
                    const bookingStart = convertTo24Hour(b.start_time);
                    const bookingEnd = convertTo24Hour(b.end_time);
                    return timeStr >= bookingStart && timeStr < bookingEnd;
                });
            }

            // Function to check if a time slot is at least 15 minutes ahead of current time
            function isTimeSlotValid(slotTime) {
                const now = new Date();
                const slotDate = new Date(slotTime);
                
                // If the slot is for a future date, it's always valid
                if (slotDate.toDateString() !== now.toDateString()) {
                    return true;
                }
                
                // Calculate the difference in minutes
                const diffInMinutes = (slotDate - now) / (1000 * 60);
                return diffInMinutes >= 15;
            }

            // Function to convert AM/PM time to 24-hour format
            function convertTo24Hour(time) {
                const [timeStr, period] = time.split(' ');
                let [hours, minutes] = timeStr.split(':');
                hours = parseInt(hours);
                
                if (period === 'PM' && hours !== 12) {
                    hours += 12;
                } else if (period === 'AM' && hours === 12) {
                    hours = 0;
                }
                
                return `${hours.toString().padStart(2, '0')}:${minutes}`;
            }

            // Generate slots
            while (start < end) {
                const timeStr = start.toTimeString().slice(0, 5);
                const slotEnd = new Date(start);
                slotEnd.setHours(slotEnd.getHours() + 1);
                const slotEndStr = slotEnd.toTimeString().slice(0, 5);

                if (!isBreakTime(start) && !isBooked(start) && isTimeSlotValid(start)) {
                    slots.push({
                        start: timeStr,
                        end: slotEndStr,
                        display: convertTo12Hour(timeStr)
                    });
                }

                start.setHours(start.getHours() + 1);
            }

            return slots;
        }

        // Format time to 12-hour format
        function formatTime(time) {
            const [hours, minutes] = time.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const hour12 = hour % 12 || 12;
            return `${hour12}:${minutes} ${ampm}`;
        }

        // Load available time slots
        function loadTimeSlots() {
            const timeSlotsDiv = document.getElementById('time-slots');
            const noSlotsMsg = document.getElementById('no-slots');
            timeSlotsDiv.innerHTML = '';

            // console.log('Loading slots for date:', selectedDate);
            
            fetch(`/booking/<%= user.username %>/slots?date=${selectedDate}`)
                .then(response => response.json())
                .then(data => {
                    // console.log('Available slots:', data);
                    
                    if (!data.slots || data.slots.length === 0) {
                        noSlotsMsg.textContent = 'No appointments available on this day.';
                        noSlotsMsg.classList.remove('hidden');
                        return;
                    }

                    noSlotsMsg.classList.add('hidden');
                    data.slots.forEach(slot => {
                        const button = document.createElement('button');
                        button.type = 'button';
                        button.className = 'p-3 text-sm border rounded-lg hover:bg-blue-50 transition-colors';
                        button.textContent = formatTime(slot.start_time);
                        button.onclick = () => selectTimeSlot(slot.start_time, slot.end_time);
                        timeSlotsDiv.appendChild(button);
                    });
                })
                .catch(error => {
                    // console.error('Error loading time slots:', error);
                    noSlotsMsg.textContent = 'Unable to load available time slots. Please try again later.';
                    noSlotsMsg.classList.remove('hidden');
                });
        }

        // Handle time slot selection
        function selectTimeSlot(start, end) {
            selectedTime = { start, end };
            
            // Update button styles
            document.querySelectorAll('#time-slots button').forEach(btn => {
                if (btn.textContent === formatTime(start)) {
                    btn.classList.add('bg-blue-500', 'text-white', 'hover:bg-blue-600');
                    btn.classList.remove('hover:bg-blue-50');
                } else {
                    btn.classList.remove('bg-blue-500', 'text-white', 'hover:bg-blue-600');
                    btn.classList.add('hover:bg-blue-50');
                }
            });
        }

        // Handle form submission
        document.getElementById('booking-form').addEventListener('submit', function(e) {
            e.preventDefault();

            if (!selectedDate || !selectedTime) {
                alert('Please select a date and time');
                return;
            }

            const formData = {
                date: selectedDate,
                start_time: selectedTime.start,
                end_time: selectedTime.end,
                client_name: document.getElementById('name').value,
                client_email: document.getElementById('email').value,
                client_phone: document.getElementById('phone').value,
                notes: document.getElementById('notes').value
            };

            // console.log('Submitting booking:', formData);

            fetch('/booking/<%= user.username %>', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'text/html,application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                // console.log('Response status:', response.status);
                // console.log('Response headers:', response.headers);
                
                if (!response.ok) {
                    return response.text().then(text => {
                        // console.error('Error response:', text);
                        try {
                            const json = JSON.parse(text);
                            throw new Error(json.error || 'Failed to book appointment');
                        } catch (e) {
                            throw new Error(text || 'Failed to book appointment');
                }
                    });
                }
                
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                }
                return response.text();
            })
            .then(result => {
                // console.log('Booking result:', result);
                if (typeof result === 'string') {
                    // Handle HTML response
                    document.documentElement.innerHTML = result;
                window.history.pushState({}, '', window.location.pathname + '/confirmation');
                window.scrollTo(0, 0);
                } else {
                    // Handle JSON response
                    window.location.href = window.location.pathname + '/confirmation';
                }
            })
            .catch(error => {
                // console.error('Booking error:', error);
                alert(error.message || 'Failed to book appointment. Please try again.');
            });
        });
    </script>
</body>
</html> 