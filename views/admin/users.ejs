<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management - isked Admin</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="/css/toast.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen">
    <%- include('../partials/admin-header') %>

    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">User Management</h1>
        </div>

        <!-- Filters -->
        <div class="bg-white rounded-lg p-4 mb-6">
            <form id="filterForm" class="flex flex-wrap gap-4">
                <div class="flex-1 min-w-[200px]">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Search</label>
                    <input type="text" name="search" value="<%= filters.search || '' %>" 
                        class="w-full px-3 py-2 border rounded-lg" placeholder="Search by name or email">
                </div>
                <div class="w-48">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                    <select name="status" class="w-full px-3 py-2 border rounded-lg">
                        <option value="">All</option>
                        <option value="active" <%= filters.status === 'active' ? 'selected' : '' %>>Active</option>
                        <option value="inactive" <%= filters.status === 'inactive' ? 'selected' : '' %>>Inactive</option>
                    </select>
                </div>
                <div class="flex items-end">
                    <button type="submit" class="bg-gray-100 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-200">
                        Apply Filters
                    </button>
                </div>
            </form>
        </div>

        <!-- Users Table -->
        <div class="bg-white rounded-lg shadow overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Joined</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="user-table-body" class="bg-white divide-y divide-gray-200">
                    <!-- Users will be loaded dynamically -->
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="flex justify-between items-center mt-6">
            <button id="prev-page" class="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">Previous</button>
            <span id="pagination-info" class="text-gray-600"></span>
            <button id="next-page" class="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">Next</button>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="userModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4">Edit User</h3>
                <form id="userForm" class="space-y-4">
                    <input type="hidden" id="userId">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                        <input type="text" id="full-name" required
                            class="w-full px-3 py-2 border rounded-lg">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="email" id="email" required
                            class="w-full px-3 py-2 border rounded-lg">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select id="status" class="w-full px-3 py-2 border rounded-lg">
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                        </select>
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button type="button" onclick="closeUserModal()"
                            class="bg-gray-200 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-300">
                            Cancel
                        </button>
                        <button type="submit"
                            class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteConfirmationModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-[480px] shadow-lg rounded-2xl bg-white">
            <div class="mt-3">
                <div class="flex items-center justify-center">
                    <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100">
                        <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                        </svg>
                    </div>
                </div>
                <div class="mt-4 text-center">
                    <h3 class="text-xl font-semibold text-gray-900">Delete User</h3>
                    <div class="mt-3">
                        <p class="text-base text-gray-600">
                            Are you sure you want to delete this user? This action cannot be undone.
                        </p>
                    </div>
                    <div class="mt-6 flex justify-center space-x-3">
                        <button onclick="closeDeleteModal()" 
                            class="w-32 bg-gray-100 text-gray-700 px-4 py-3 rounded-lg text-base font-medium hover:bg-gray-200">
                            Cancel
                        </button>
                        <button id="confirmDeleteButton"
                            class="w-32 bg-red-600 text-white px-4 py-3 rounded-lg text-base font-medium hover:bg-red-700">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/js/toast.js"></script>
    <script>
    let currentPage = 1;
    let totalPages = 1;
    let userToDelete = null;

    // Load users function
    function loadUsers() {
        const searchParams = new URLSearchParams(window.location.search);
        const search = searchParams.get('search') || '';
        const status = searchParams.get('status') || '';
        
        const url = `/admin/users/data?page=${currentPage}&search=${encodeURIComponent(search)}&status=${status}`;
        
        fetch(url)
            .then(response => response.json())
            .then(data => {
                const tbody = document.getElementById('user-table-body');
                tbody.innerHTML = '';

                data.users.forEach(user => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 h-10 w-10">
                                    <div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                                        <span class="text-lg font-medium text-gray-600">
                                            ${user.name ? user.name.charAt(0).toUpperCase() : '?'}
                                        </span>
                                    </div>
                                </div>
                                <div class="ml-4">
                                    <div class="text-sm font-medium text-gray-900">${user.name || 'N/A'}</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">${user.email}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                ${user.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                ${user.status}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">
                                ${new Date(user.created_at).toLocaleDateString()}
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button onclick='openEditModal(${JSON.stringify(JSON.stringify(user))})' 
                                class="text-blue-600 hover:text-blue-900 mr-3">Edit</button>
                            <button onclick="showDeleteConfirmation('${user.id}')"
                                class="text-red-600 hover:text-red-900">Delete</button>
                        </td>
                    `;
                    tbody.appendChild(tr);
                });

                // Update pagination
                totalPages = Math.ceil(data.total / 10);
                document.getElementById('pagination-info').textContent = `Page ${currentPage} of ${totalPages}`;
                document.getElementById('prev-page').disabled = currentPage === 1;
                document.getElementById('next-page').disabled = currentPage === totalPages;
            })
            .catch(error => {
                console.error('Error loading users:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to load users'
                });
            });
    }

    function openEditModal(userStr) {
        const user = JSON.parse(userStr.replace(/&quot;/g, '"'));
        document.getElementById('userId').value = user.id;
        document.getElementById('full-name').value = user.name || '';
        document.getElementById('email').value = user.email;
        document.getElementById('status').value = user.status;
        document.getElementById('userModal').classList.remove('hidden');
    }

    function closeUserModal() {
        document.getElementById('userModal').classList.add('hidden');
    }

    function showDeleteConfirmation(id) {
        userToDelete = id;
        document.getElementById('deleteConfirmationModal').classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeDeleteModal() {
        document.getElementById('deleteConfirmationModal').classList.add('hidden');
        document.body.style.overflow = '';
        userToDelete = null;
    }

    document.getElementById('userForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = {
            full_name: document.getElementById('full-name').value,
            email: document.getElementById('email').value,
            status: document.getElementById('status').value
        };

        const userId = document.getElementById('userId').value;

        try {
            const response = await fetch(`/admin/users/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const data = await response.json();
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: data.error || 'Failed to update user'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            toast.show({
                type: 'error',
                title: 'Error',
                message: 'Failed to update user'
            });
        }
    });

    document.getElementById('filterForm').addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const params = new URLSearchParams(formData);
        window.location.href = `/admin/users?${params.toString()}`;
    });

    document.getElementById('confirmDeleteButton').addEventListener('click', async () => {
        if (userToDelete) {
            try {
                const response = await fetch(`/admin/users/${userToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    closeDeleteModal();
                    window.location.reload();
                } else {
                    const data = await response.json();
                    throw new Error(data.error || 'Failed to delete user');
                }
            } catch (error) {
                console.error('Error:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to delete user'
                });
            }
        }
    });

    // Load initial data
    loadUsers();

    // Add pagination event listeners
    document.getElementById('prev-page').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            loadUsers();
        }
    });

    document.getElementById('next-page').addEventListener('click', () => {
        if (currentPage < totalPages) {
            currentPage++;
            loadUsers();
        }
    });
    </script>

    <%- include('../partials/admin-footer') %>
</body>
</html> 