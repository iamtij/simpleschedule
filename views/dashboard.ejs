<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>isked - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
    <link href="/css/toast.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="/js/toast.js" defer></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        /* Calendar Container */
        .fc {
            background: #FAFAFA;
            border-radius: 6px;
            overflow: hidden;
        }

        /* Grid lines and borders */
        .fc th,
        .fc td {
            border-color: #E5E7EB !important;
        }

        /* Event styling */
        .fc-event {
            border-radius: 6px !important;
            padding: 2px 6px !important;
            margin: 1px 2px !important;
            min-height: 24px !important;
            border: none !important;
            background-color: #E0F2FE !important;
            color: #0369A1 !important;
            cursor: pointer !important;
            overflow: hidden !important;
        }

        .fc-event:hover {
            background-color: #BAE6FD !important;
        }

        .fc-event-title {
            white-space: normal !important;
            word-wrap: break-word !important;
            overflow: hidden !important;
            line-height: 1.2 !important;
            display: block !important;
        }

        .fc-event-time {
            white-space: nowrap !important;
            display: inline-block !important;
            margin-right: 4px !important;
        }

        /* Add consistent styling for time grid events */
        .fc-timegrid-event {
            background-color: #E0F2FE !important;
            border: none !important;
            margin: 1px 0 !important;
            overflow: hidden !important;
        }

        .fc-timegrid-event:hover {
            background-color: #BAE6FD !important;
        }

        .fc-timegrid-event .fc-event-main {
            padding: 2px 6px !important;
            color: #0369A1 !important;
            overflow: hidden !important;
        }

        .fc-timegrid-event .fc-event-title {
            white-space: normal !important;
            word-wrap: break-word !important;
            overflow: hidden !important;
            line-height: 1.2 !important;
            display: block !important;
        }

        .fc-timegrid-event .fc-event-time {
            white-space: nowrap !important;
            display: inline-block !important;
            margin-right: 4px !important;
        }

        /* Style the time slots */
        .fc-timegrid-slot {
            height: 40px !important;
            border-color: #E5E7EB !important;
        }

        /* Background color for time grid */
        .fc-timegrid-col {
            background-color: #FAFAFA !important;
        }

        /* Current time indicator */
        .fc-timegrid-now-indicator-line {
            border-color: #10B981 !important;
        }

        .fc-timegrid-now-indicator-arrow {
            border-color: #10B981 !important;
            color: #10B981 !important;
        }

        /* Today highlight */
        .fc-day-today {
            background-color: #ECFDF5 !important;
        }

        .fc-day-today .fc-daygrid-day-frame,
        .fc-day-today .fc-timegrid-col-frame {
            border: 1px solid #10B981 !important;
            border-radius: 6px;
        }

        /* Header styling */
        .fc-toolbar-title {
            color: #111827 !important;
            font-weight: 600 !important;
        }

        .fc-button-primary {
            background-color: white !important;
            border-color: #E5E7EB !important;
            color: #374151 !important;
            font-weight: 500 !important;
            padding: 0.5rem 1rem !important;
            border-radius: 6px !important;
        }

        .fc-button-primary:hover {
            background-color: #F3F4F6 !important;
            border-color: #D1D5DB !important;
        }

        .fc-button-primary:not(:disabled).fc-button-active,
        .fc-button-primary:not(:disabled):active {
            background-color: #F3F4F6 !important;
            border-color: #D1D5DB !important;
            color: #111827 !important;
        }

        /* Mobile optimizations */
        @media (max-width: 640px) {
            .fc-header-toolbar {
                display: flex !important;
                flex-direction: column !important;
                align-items: stretch !important;
                gap: 0.75rem !important;
            }

            .fc-toolbar-chunk {
                display: flex !important;
                justify-content: center !important;
                width: 100% !important;
            }

            /* Reorder toolbar chunks */
            .fc-toolbar-chunk:nth-child(2) { order: 1; } /* Title (Month Year) */
            .fc-toolbar-chunk:nth-child(1) { order: 2; } /* Navigation (prev, today, next) */
            .fc-toolbar-chunk:nth-child(3) { order: 3; } /* View buttons */

            .fc-toolbar-title {
                font-size: 1.5rem !important;
                font-weight: 600 !important;
                text-align: center !important;
                width: 100% !important;
            }

            /* Adjust navigation buttons spacing */
            .fc-prev-button,
            .fc-next-button,
            .fc-today-button {
                padding: 0.5rem 1rem !important;
            }

            /* Make view buttons more prominent */
            .fc-button-group {
                width: 100% !important;
                display: flex !important;
                gap: 0.5rem !important;
            }

            .fc-button-group .fc-button {
                flex: 1 !important;
            }

            .fc-event {
                font-size: 11px !important;
            }
            
            .fc-event-title {
                display: block !important;
                overflow: hidden !important;
                text-overflow: ellipsis !important;
            }
        }

        /* Desktop event styling */
        @media (min-width: 641px) {
            .fc-event-title,
            .fc-event-time {
                display: inline !important;
            }
        }

        /* Modal styling */
        .modal-overlay {
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
        }

        @media (max-width: 768px) {
        .modal-content {
                max-width: 90% !important;
                min-width: unset !important;
                margin: 0 auto;
            }
        }

        /* Smooth transitions */
        .modal-content {
            transform: scale(0.95);
        }

        #booking-modal:not(.hidden) .modal-content {
            transform: scale(1);
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Toast Container -->
    <div id="toast-container"></div>
    
    <!-- Booking Details Modal -->
    <div id="booking-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50 overflow-y-auto">
        <div class="flex items-start justify-center min-h-screen p-4 py-8">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 my-8">
                <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Edit Booking</h3>
                </div>
                <form id="booking-details-form" class="px-4 sm:px-6 py-4 space-y-4">
                    <input type="hidden" id="booking-details-id" name="booking_id">
                    
                    <!-- Read-only Client Information -->
                    <div class="space-y-3">
                        <div>
                            <label class="block text-sm font-medium text-gray-500 mb-1">Client Name</label>
                            <div class="w-full px-3 py-2 text-sm bg-gray-50 border border-gray-200 rounded-lg text-gray-700" id="readonly-client-name">
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500 mb-1">Client Email</label>
                            <div class="w-full px-3 py-2 text-sm bg-gray-50 border border-gray-200 rounded-lg text-gray-700" id="readonly-client-email">
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500 mb-1">Client Phone</label>
                            <div class="w-full px-3 py-2 text-sm bg-gray-50 border border-gray-200 rounded-lg text-gray-700" id="readonly-client-phone">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Read-only Date & Time -->
                    <div class="space-y-3">
                        <div>
                            <label class="block text-sm font-medium text-gray-500 mb-1">Date</label>
                            <div class="w-full px-3 py-2 text-sm bg-gray-50 border border-gray-200 rounded-lg text-gray-700" id="readonly-date">
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500 mb-1">Time</label>
                            <div class="w-full px-3 py-2 text-sm bg-gray-50 border border-gray-200 rounded-lg text-gray-700" id="readonly-time">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Editable Status -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Status *</label>
                        <select id="edit-booking-status" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="pending">Pending</option>
                            <option value="confirmed">Confirmed</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                    </div>
                    
                    <!-- Editable Notes -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                        <textarea id="booking-notes" name="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Add any notes..."></textarea>
                    </div>
                </form>
                <div class="px-4 sm:px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button onclick="closeBookingModal()" class="px-4 py-2 text-sm text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button onclick="saveBookingNotes()" class="px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="delete-confirmation-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm modal-overlay hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-auto">
            <div class="p-6">
                <div class="flex items-center justify-center mb-4">
                    <div class="w-12 h-12 rounded-full bg-red-100 flex items-center justify-center">
                        <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                        </svg>
                    </div>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 text-center mb-2">Delete Booking</h3>
                <p class="text-gray-600 text-center mb-6">Are you sure you want to delete this booking? This action cannot be undone.</p>
                <div class="flex justify-center space-x-3">
                    <button onclick="closeDeleteConfirmation()" 
                        class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors flex-1">
                        Cancel
                    </button>
                    <button onclick="confirmDelete()" 
                        class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors flex-1">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation -->
    <%- include('partials/navigation', { currentPage: 'dashboard', user: user }) %>

    <!-- Account Settings Modal -->
    <div id="account-settings-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm modal-overlay hidden z-[9999]">
        <div class="fixed inset-0 flex items-center justify-center p-4">
            <div class="relative w-full max-w-[480px] bg-white rounded-lg shadow-xl" onclick="event.stopPropagation()">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-800">Account Settings</h3>
                        <button type="button" class="text-gray-500 hover:text-gray-700" onclick="closeAccountSettings()">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    <form id="account-settings-form" class="space-y-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1" for="full-name">
                                Full Name
                            </label>
                            <input type="text" id="full-name" name="full-name"
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Enter your full name"
                                value="<%= user.full_name || '' %>">
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1" for="display-name">
                                Display Name
                            </label>
                            <input type="text" id="display-name" name="display-name"
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Enter your display name (shown on booking page)"
                                value="<%= user.display_name || user.full_name || '' %>">
                            <p class="mt-1 text-sm text-gray-500">This name will be shown on your booking page</p>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">
                                Email Address
                            </label>
                            <div class="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-lg text-gray-600">
                                <%= user.email %>
                            </div>
                            <p class="mt-1 text-sm text-gray-500">Email address cannot be changed</p>
                        </div>

                        <div class="flex justify-end space-x-2 pt-4">
                            <button type="button" onclick="closeAccountSettings()"
                                class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors">
                                Cancel
                            </button>
                            <button type="submit" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="min-h-screen bg-gray-50">
        <!-- Header -->
        <header class="bg-white shadow-sm border-b">
            <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Dashboard</h1>
                    <p class="text-sm text-gray-600 mt-1">Overview of your schedule and appointments</p>
                </div>
                <!-- ... existing header content ... -->
            </div>
        </header>

        <!-- Onboarding Checklist -->
        <% if ((!user.has_set_availability || !user.has_set_display_name || !user.has_shared_link) && !user.has_dismissed_checklist) { %>
        <div id="onboarding-checklist" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-6">
            <div class="bg-white overflow-hidden shadow-sm rounded-lg">
                <div class="p-6">
                    <div class="flex items-start justify-between">
                        <div>
                            <h2 class="text-lg font-semibold text-gray-900">Welcome to isked! 🎉</h2>
                            <p class="mt-1 text-sm text-gray-500">Complete these steps to get started:</p>
                        </div>
                        <button onclick="dismissChecklist()" class="text-gray-400 hover:text-gray-500">
                            <span class="sr-only">Dismiss</span>
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                    <div class="mt-4 space-y-3">
                        <% if (!user.has_set_availability) { %>
                        <div class="flex items-center" data-checklist-item="availability">
                            <div class="flex-shrink-0 h-5 w-5 relative">
                                <div class="absolute inset-0 rounded-full border-2 border-gray-300"></div>
                            </div>
                            <p class="ml-3 text-sm text-gray-700">
                                Set your availability
                                <a href="#availability-settings" onclick="scrollToAvailability()" class="text-blue-600 hover:text-blue-800 font-medium">Configure now →</a>
                            </p>
                        </div>
                        <% } else { %>
                        <div class="flex items-center" data-checklist-item="availability">
                            <div class="flex-shrink-0 h-5 w-5 relative text-green-500">
                                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <p class="ml-3 text-sm text-gray-700">
                                Availability configured
                            </p>
                        </div>
                        <% } %>

                        <% if (!user.has_set_display_name) { %>
                        <div class="flex items-center" data-checklist-item="display-name">
                            <div class="flex-shrink-0 h-5 w-5 relative">
                                <div class="absolute inset-0 rounded-full border-2 border-gray-300"></div>
                            </div>
                            <p class="ml-3 text-sm text-gray-700">
                                Update your display name
                                <a href="/settings" class="text-blue-600 hover:text-blue-800 font-medium">Set display name →</a>
                            </p>
                        </div>
                        <% } else { %>
                        <div class="flex items-center" data-checklist-item="display-name">
                            <div class="flex-shrink-0 h-5 w-5 relative text-green-500">
                                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <p class="ml-3 text-sm text-gray-700">
                                Display name updated
                            </p>
                        </div>
                        <% } %>

                        <% if (!user.has_shared_link) { %>
                        <div class="flex items-center" data-checklist-item="share-link">
                            <div class="flex-shrink-0 h-5 w-5 relative">
                                <div class="absolute inset-0 rounded-full border-2 border-gray-300"></div>
                            </div>
                            <p class="ml-3 text-sm text-gray-700">
                                Share your booking link
                                <button onclick="copyBookingLink()" class="text-blue-600 hover:text-blue-800 font-medium">Copy link →</button>
                            </p>
                        </div>
                        <% } else { %>
                        <div class="flex items-center" data-checklist-item="share-link">
                            <div class="flex-shrink-0 h-5 w-5 relative text-green-500">
                                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <p class="ml-3 text-sm text-gray-700">
                                Booking link shared
                            </p>
                        </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
        <% } %>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Dashboard Summary Cards -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                    <!-- Today's Appointments -->
                    <div class="bg-white rounded-lg shadow p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-lg font-semibold text-gray-900">Today's Appointments</h2>
                            <span id="todays-count" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                0
                            </span>
                        </div>
                        <div id="todays-appointments" class="space-y-3">
                            <div class="text-center text-gray-500 py-4">
                                <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
                                <p class="mt-2 text-sm">Loading...</p>
                            </div>
                        </div>
                    </div>

                    <!-- Follow-ups -->
                    <div class="bg-white rounded-lg shadow p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-lg font-semibold text-gray-900">Follow-ups This Week</h2>
                            <span id="followups-count" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                0
                            </span>
                        </div>
                        <div id="follow-ups" class="space-y-3">
                            <div class="text-center text-gray-500 py-4">
                                <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600 mx-auto"></div>
                                <p class="mt-2 text-sm">Loading...</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Calendar -->
                <div class="bg-white rounded-lg shadow p-6 mb-6">
                    <div id="calendar"></div>
                </div>

        </main>
    </div>

    <script>
        let currentBookingId = null;
        let calendarInstance = null;
        let justSwitchedToDay = false;

        document.addEventListener('DOMContentLoaded', function() {
            
            // Initialize calendar and other functionality
            initializeCalendar();
            
            // Load dashboard data
            loadDashboardData();
        });


        function initializeCalendar() {
            const calendarEl = document.getElementById('calendar');
            calendarInstance = new FullCalendar.Calendar(calendarEl, {
                initialView: window.innerWidth < 768 ? 'timeGridDay' : 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,today,next',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                views: {
                    dayGridMonth: {
                        titleFormat: { year: 'numeric', month: 'long' }
                    },
                    timeGridWeek: {
                        titleFormat: { year: 'numeric', month: 'long', day: '2-digit' }
                    },
                    timeGridDay: {
                        titleFormat: { year: 'numeric', month: 'long', day: '2-digit' }
                    }
                },
                navLinks: true,
                nowIndicator: true,
                dayMaxEvents: true,
                selectable: true,
                editable: false,
                handleWindowResize: true,
                timeZone: 'Asia/Manila',
                slotMinTime: '06:00:00',
                slotMaxTime: '24:00:00',
                eventTimeFormat: {
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short',
                    hour12: true
                },
                allDaySlot: false,
                slotDuration: '00:30:00',
                height: 'auto',
                contentHeight: 'auto',
                expandRows: true,
                windowResizeDelay: 200,
                businessHours: {
                    daysOfWeek: [0, 1, 2, 3, 4, 5, 6],
                    startTime: '09:00',
                    endTime: '17:00'
                },
                events: function(info, successCallback, failureCallback) {
                    fetch('/bookings/api')
                        .then(response => response.json())
                        .then(events => {
                            // Events are already properly formatted by the API
                            console.log('📅 Calendar received events:', events);
                            successCallback(events);
                        })
                        .catch(error => failureCallback(error));
                },
                eventContent: function(arg) {
                    // Use the original time strings from extendedProps (already in correct timezone)
                    const startTime = formatTimeShort(arg.event.extendedProps.start_time);
                    const endTime = formatTimeShort(arg.event.extendedProps.end_time);
                    return {
                        html: `
                            <div class="fc-content p-1">
                                <div class="text-xs font-medium">
                                    <div class="fc-event-time">${startTime} - ${endTime} - ${arg.event.extendedProps.client_name}</div>
                                </div>
                            </div>
                        `
                    };
                },
                eventClick: function(info) {
                    showBookingDetails(info.event);
                },
                datesSet: function(info) {
                    // Refresh events when date range changes
                    calendarInstance.refetchEvents();
                },
                // Add custom button click handlers
                customButtons: {
                    prev: {
                        click: function() {
                            const view = calendarInstance.view;
                            const date = calendarInstance.getDate();
                            
                            if (view.type === 'timeGridDay') {
                                date.setDate(date.getDate() - 1);
                                calendarInstance.gotoDate(date);
                            } else {
                                calendarInstance.prev();
                            }
                        }
                    },
                    next: {
                        click: function() {
                            const view = calendarInstance.view;
                            const date = calendarInstance.getDate();
                            
                            if (view.type === 'timeGridDay') {
                                date.setDate(date.getDate() + 1);
                                calendarInstance.gotoDate(date);
                            } else {
                                calendarInstance.next();
                            }
                        }
                    }
                }
            });
            calendarInstance.render();

        }

        function formatTimeShort(timeStr) {
            if (!timeStr) return '';
            timeStr = timeStr.trim();
            const [time, period] = timeStr.split(' ');
            if (period) {
                // Already in AM/PM format
                const [hours, minutes] = time.split(':');
                return `${parseInt(hours)}${minutes !== '00' ? ':' + minutes : ''}${period}`;
            }
            const [hours, minutes] = time.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const hour12 = hour % 12 || 12;
            return `${hour12}${minutes !== '00' ? ':' + minutes : ''}${ampm}`;
        }

        function showBookingDetails(event) {
            currentBookingId = event.id;
            const details = event.extendedProps;
            console.log('Event extended props:', details);
            
            // Format date
            const date = new Date(event.start);
            console.log('Event start date:', date);
            const formattedDate = date.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            console.log('Formatted date:', formattedDate);

            // Use the original time strings from extendedProps (already in correct timezone)
            const startTime = formatTimeShort(event.extendedProps.start_time);
            const endTime = formatTimeShort(event.extendedProps.end_time);
            console.log('Formatted times:', { startTime, endTime });
            
            try {
                // Update modal content with new structure
                document.getElementById('booking-details-id').value = event.id;
                document.getElementById('readonly-client-name').textContent = details.client_name || event.title.split(' - ')[0];
                document.getElementById('readonly-client-email').textContent = details.client_email || '—';
                document.getElementById('readonly-client-phone').textContent = details.client_phone || '—';
                document.getElementById('readonly-date').textContent = formattedDate;
                document.getElementById('readonly-time').textContent = `${startTime} - ${endTime}`;
                document.getElementById('edit-booking-status').value = details.status || 'pending';
                document.getElementById('booking-notes').value = details.notes || '';
                
                // Show modal
                const modal = document.getElementById('booking-modal');
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden'; // Prevent background scrolling

                // Remove any existing click event listeners
                modal.removeEventListener('click', handleModalClick);
                
                // Add click outside to close
                modal.addEventListener('click', handleModalClick);

                // Focus on notes textarea
                setTimeout(() => {
                    notesTextarea.focus();
                }, 300);
            } catch (error) {
                console.error('Error updating modal content:', error);
            }
        }

        function handleModalClick(e) {
            const modal = document.getElementById('booking-modal');
            const modalContent = modal.querySelector('.modal-content');
            if (e.target === modal && !modalContent.contains(e.target)) {
                closeBookingModal();
            }
        }

        function copyPhoneNumber(element) {
            const phone = element.textContent;
            if (phone && phone !== '—') {
                navigator.clipboard.writeText(phone).then(() => {
                    const originalText = element.textContent;
                    element.textContent = 'Copied!';
                    setTimeout(() => {
                        element.textContent = originalText;
                    }, 1500);
                });
            }
        }

        function saveBookingNotes() {
            const notes = document.getElementById('booking-notes').value;
            const status = document.getElementById('edit-booking-status').value;
            updateBookingDetails(currentBookingId, notes, status);
        }

        function updateBookingDetails(bookingId, notes, status) {
            fetch(`/bookings/${bookingId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ notes, status })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close the modal
                    closeBookingModal();
                    
                    // Refresh the calendar
                    if (calendarInstance) {
                        calendarInstance.refetchEvents();
                    }
                    
                    // Show success toast
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Booking updated successfully'
                    });
                } else {
                    throw new Error(data.error || 'Failed to update booking');
                }
            })
            .catch(error => {
                // console.error('Error updating booking:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update booking'
                });
            });
        }

        function closeBookingModal() {
            const modal = document.getElementById('booking-modal');
            modal.classList.add('hidden');
            document.body.style.overflow = ''; // Restore background scrolling
            currentBookingId = null;
        }


        function closeDeleteConfirmation() {
            const modal = document.getElementById('delete-confirmation-modal');
            modal.classList.add('hidden');
            document.body.style.overflow = '';
        }

        function confirmDelete() {
            fetch(`/bookings/${currentBookingId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => Promise.reject(err.error || 'Failed to delete booking'));
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    closeDeleteConfirmation();
                    closeBookingModal();
                    if (calendarInstance) {
                        calendarInstance.refetchEvents();
                    }
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Booking deleted successfully'
                    });
                } else {
                    throw new Error(data.error || 'Failed to delete booking');
                }
            })
            .catch(error => {
                // console.error('Error deleting booking:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: typeof error === 'string' ? error : 'Failed to delete booking'
                });
            });
        }

        // Add keyboard event listener to close delete confirmation modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeDeleteConfirmation();
            }
        });

        function copyBookingLink() {
            const username = '<%= user.username %>';
            const bookingLink = `${window.location.origin}/booking/${username}`;
            
            navigator.clipboard.writeText(bookingLink).then(() => {
                toast.show({
                    type: 'success',
                    title: 'Link copied!',
                    message: 'Your booking link has been copied to clipboard'
                });

                fetch('/dashboard/update-share-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateChecklistItem('share-link', true);
                    }
                });
            }).catch(() => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to copy link to clipboard'
                });
            });
        }

        // Dismiss checklist
        function dismissChecklist() {
            // Send request to dismiss checklist
            fetch('/dashboard/dismiss-checklist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Hide the checklist with a fade-out animation
                    const checklist = document.getElementById('onboarding-checklist');
                    checklist.style.transition = 'opacity 0.3s ease-out';
                    checklist.style.opacity = '0';
                    setTimeout(() => {
                        checklist.remove(); // Remove instead of just hiding
                    }, 300);
                }
            })
            .catch(error => {
                // console.error('Error dismissing checklist:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to dismiss checklist'
                });
            });
        }


        // Function to show edit notes modal
        function showEditNotesModal(bookingId, notes) {
            document.getElementById('edit-booking-id').value = bookingId;
            document.getElementById('edit-notes').value = notes || '';
            const modal = document.getElementById('edit-notes-modal');
            modal.classList.remove('hidden');
            modal.style.display = 'block';
        }

        // Function to close edit notes modal
        function closeEditNotesModal() {
            const modal = document.getElementById('edit-notes-modal');
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }

        // Handle edit notes form submission
        document.getElementById('edit-notes-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const bookingId = document.getElementById('edit-booking-id').value;
            const notes = document.getElementById('edit-notes').value;

            fetch(`/bookings/${bookingId}/notes`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ notes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeEditNotesModal();
                    if (calendarInstance) {
                        calendarInstance.refetchEvents();
                    }
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Notes updated successfully'
                    });
                } else {
                    throw new Error(data.error || 'Failed to update notes');
                }
            })
            .catch(error => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update notes'
                });
            });
        });

        // Add keyboard event listener to close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditNotesModal();
            }
        });

        function attachDayButtonHandler() {
            const dayBtn = document.querySelector('.fc-timeGridDay-button');
            if (dayBtn && !dayBtn.classList.contains('isked-day-handler')) {
                dayBtn.classList.add('isked-day-handler');
                dayBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const today = new Date();
                    calendarInstance.gotoDate(today);
                    calendarInstance.changeView('timeGridDay');
                });
            }
        }

        function scrollToAvailability() {
            const availabilitySection = document.getElementById('availability-settings');
            const availabilityContent = document.getElementById('availability-content');
            
            // Show availability content if hidden
            if (availabilityContent.classList.contains('hidden')) {
                availabilityContent.classList.remove('hidden');
                document.getElementById('toggle-arrow').classList.add('rotate-180');
            }
            
            // Scroll to section with smooth animation
            availabilitySection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }


        // Update checklist item status
        function updateChecklistItem(itemType, completed) {
            const item = document.querySelector(`[data-checklist-item="${itemType}"]`);
            if (item) {
                const icon = item.querySelector('.flex-shrink-0');
                const text = item.querySelector('p');
                
                if (completed) {
                    icon.innerHTML = `
                        <div class="flex-shrink-0 h-5 w-5 relative text-green-500">
                            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                        </div>
                    `;
                    
                    switch(itemType) {
                        case 'availability':
                            text.innerHTML = 'Availability configured';
                            break;
                        case 'display-name':
                            text.innerHTML = 'Display name updated';
                            break;
                        case 'share-link':
                            text.innerHTML = 'Booking link shared';
                            break;
                    }
                }
            }

            checkAllTasksComplete();
        }

        // Check if all tasks are complete and hide checklist if they are
        function checkAllTasksComplete() {
            const checklist = document.getElementById('onboarding-checklist');
            if (!checklist) return;

            const incompleteItems = checklist.querySelectorAll('.rounded-full.border-2.border-gray-300');
            if (incompleteItems.length === 0) {
                // All items are complete, hide the checklist with a fade out
                checklist.style.transition = 'opacity 0.5s ease-out';
                checklist.style.opacity = '0';
                setTimeout(() => {
                    checklist.remove();
                }, 500);
            }
        }

        // Load dashboard data
        async function loadDashboardData() {
            try {
                const response = await fetch('/dashboard/data');
                const result = await response.json();
                
                if (result.success) {
                    loadTodaysAppointments(result.data.todaysAppointments);
                    loadFollowUps(result.data.followUps);
                } else {
                    console.error('Failed to load dashboard data:', result.error);
                }
            } catch (error) {
                console.error('Error loading dashboard data:', error);
            }
        }

        // Load today's appointments
        function loadTodaysAppointments(appointments) {
            const container = document.getElementById('todays-appointments');
            const countElement = document.getElementById('todays-count');
            
            countElement.textContent = appointments.length;
            
            if (appointments.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-gray-500 py-4">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <p class="mt-2 text-sm">No appointments scheduled for today</p>
                    </div>
                `;
                return;
            }

            const appointmentsHTML = appointments.map(appointment => `
                <div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                    <div class="flex-shrink-0">
                        <div class="w-3 h-3 rounded-full ${appointment.status === 'confirmed' ? 'bg-green-500' : appointment.status === 'pending' ? 'bg-yellow-500' : 'bg-gray-500'}"></div>
                    </div>
                    <div class="flex-1 min-w-0">
                        <div class="flex items-center justify-between">
                            <p class="text-sm font-medium text-gray-900 truncate">${appointment.client_name}</p>
                            <p class="text-sm text-gray-500">${formatTime(appointment.start_time)} - ${formatTime(appointment.end_time)}</p>
                        </div>
                        <div class="flex items-center space-x-2 mt-1">
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${appointment.status === 'confirmed' ? 'bg-green-100 text-green-800' : appointment.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'}">
                                ${appointment.status || 'pending'}
                            </span>
                            ${appointment.notes ? `<p class="text-xs text-gray-600 truncate">${appointment.notes}</p>` : ''}
                        </div>
                    </div>
                </div>
            `).join('');

            container.innerHTML = appointmentsHTML;
        }

        // Load follow-ups
        function loadFollowUps(followUps) {
            const container = document.getElementById('follow-ups');
            const countElement = document.getElementById('followups-count');
            
            countElement.textContent = followUps.length;
            
            if (followUps.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-gray-500 py-4">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <p class="mt-2 text-sm">No follow-ups scheduled this week</p>
                    </div>
                `;
                return;
            }

            const followUpsHTML = followUps.map(contact => {
                const followUpDate = new Date(contact.next_follow_up);
                const today = new Date();
                const diffTime = followUpDate.getTime() - today.getTime();
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                
                let badgeClass = '';
                let badgeText = '';
                
                if (diffDays < 0) {
                    badgeClass = 'bg-red-100 text-red-800';
                    badgeText = `Overdue ${Math.abs(diffDays)}d`;
                } else if (diffDays === 0) {
                    badgeClass = 'bg-red-100 text-red-800';
                    badgeText = 'Due Today';
                } else if (diffDays <= 7) {
                    badgeClass = 'bg-yellow-100 text-yellow-800';
                    badgeText = `In ${diffDays}d`;
                } else {
                    badgeClass = 'bg-blue-100 text-blue-800';
                    badgeText = followUpDate.toLocaleDateString();
                }

                return `
                    <div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                <span class="text-sm font-medium text-blue-600">${contact.name.charAt(0).toUpperCase()}</span>
                            </div>
                        </div>
                        <div class="flex-1 min-w-0">
                            <div class="flex items-center justify-between">
                                <a href="/contacts/${contact.id}" class="text-sm font-medium text-blue-600 hover:text-blue-800 truncate hover:underline">
                                    ${contact.name}
                                </a>
                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${badgeClass}">
                                    ${badgeText}
                                </span>
                            </div>
                            <div class="flex items-center justify-between mt-1">
                                <div class="flex items-center space-x-2">
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                                        ${contact.status.replace('_', ' ')}
                                    </span>
                                    ${contact.bni_member ? `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800">BNI Member</span>` : ''}
                                </div>
                                <div class="text-xs text-gray-500 font-medium">
                                    ${followUpDate.toLocaleDateString('en-US', { 
                                        month: 'short', 
                                        day: 'numeric',
                                        year: 'numeric'
                                    })}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = followUpsHTML;
        }

        // Helper function to format time
        function formatTime(timeString) {
            if (!timeString) return '';
            const [hours, minutes] = timeString.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const displayHour = hour % 12 || 12;
            return `${displayHour}:${minutes} ${ampm}`;
        }
    </script>
</body>
</html> 
