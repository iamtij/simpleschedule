<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>isked - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
    <link href="/css/toast.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="/js/toast.js" defer></script>
    <style>
        /* Custom calendar styling */
        .fc-event {
            border-radius: 4px !important;
            padding: 2px !important;
            margin: 1px 0 !important;
            min-height: 40px !important;
        }
        
        .fc-daygrid-day-events {
            min-height: auto !important;
            padding: 2px !important;
        }

        .fc-daygrid-event-harness {
            margin-bottom: 2px !important;
        }

        .fc-event-title {
            font-weight: 500 !important;
            white-space: normal !important;
            overflow: visible !important;
        }

        .fc-daygrid-more-link {
            display: none !important;
        }

        /* Week view specific styles */
        .fc-timegrid-event {
            border-radius: 4px !important;
            padding: 4px !important;
        }

        .fc-timegrid-event .fc-event-main {
            padding: 2px 4px !important;
        }

        /* Today highlight */
        .fc-day-today {
            background-color: #ebf8ff !important;
        }

        /* Header styling */
        .fc-header-toolbar {
            margin-bottom: 1.5em !important;
            flex-wrap: wrap !important;
            gap: 0.5rem !important;
        }

        .fc-toolbar-chunk {
            display: flex !important;
            align-items: center !important;
            gap: 0.25rem !important;
        }

        .fc-button {
            padding: 0.375rem 0.75rem !important;
            font-size: 0.875rem !important;
        }

        .fc-button-primary {
            background-color: #4299e1 !important;
            border-color: #3182ce !important;
        }

        .fc-button-primary:hover {
            background-color: #3182ce !important;
            border-color: #2c5282 !important;
        }

        .fc-button-active {
            background-color: #2c5282 !important;
            border-color: #2a4365 !important;
        }

        /* Mobile optimizations */
        @media (max-width: 640px) {
            .fc-header-toolbar {
                display: flex !important;
                flex-direction: column !important;
                align-items: stretch !important;
                gap: 0.75rem !important;
            }

            .fc-toolbar-chunk {
                justify-content: center !important;
                width: 100% !important;
            }

            /* Center the title */
            .fc-toolbar-chunk:nth-child(2) {
                order: -1 !important;
            }

            .fc-toolbar-title {
                font-size: 1.25rem !important;
                text-align: center !important;
                width: 100% !important;
            }

            /* Compact navigation buttons */
            .fc-prev-button,
            .fc-next-button,
            .fc-today-button {
                padding: 0.25rem 0.5rem !important;
                font-size: 0.875rem !important;
            }

            /* Make view buttons more compact */
            .fc-dayGridMonth-button,
            .fc-timeGridWeek-button,
            .fc-timeGridDay-button {
                padding: 0.25rem !important;
                font-size: 0.75rem !important;
                min-width: 4rem !important;
            }

            /* Hide button text on very small screens */
            @media (max-width: 380px) {
                .fc-dayGridMonth-button .fc-icon,
                .fc-timeGridWeek-button .fc-icon,
                .fc-timeGridDay-button .fc-icon {
                    margin: 0 !important;
                }

                .fc-button-group {
                    gap: 0.125rem !important;
                }
            }
        }

        /* Modal styling */
        .modal-overlay {
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            max-height: 90vh;
            overflow-y: auto;
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Booking Details Modal -->
    <div id="booking-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 modal-overlay hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white modal-content">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Booking Details</h3>
                    <button onclick="closeBookingModal()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div class="space-y-3" id="booking-details">
                    <!-- Details will be populated by JavaScript -->
                </div>
                <div class="mt-6 flex justify-between">
                    <button onclick="closeBookingModal()" 
                            class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors">
                        Back to Dashboard
                    </button>
                    <button onclick="deleteBooking()" 
                            class="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                        Delete Booking
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Username Change Modal -->
    <div id="username-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 modal-overlay hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white modal-content">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Change Username</h3>
                    <button onclick="closeUsernameModal()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <form id="username-form" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1" for="new-username">
                            New Username
                        </label>
                        <input class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                            id="new-username" name="new-username" type="text" required
                            pattern="^[a-zA-Z0-9_-]+$"
                            title="Username can only contain letters, numbers, underscores and hyphens"
                            placeholder="Enter new username">
                        <p class="mt-1 text-sm text-gray-500">Your new booking link will be: isked.app/booking/<span class="text-gray-700">username</span></p>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" onclick="closeUsernameModal()" 
                            class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit" 
                            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Notes Modal -->
    <div id="edit-notes-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 modal-overlay hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white modal-content">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Edit Booking Notes</h3>
                    <button onclick="closeEditNotesModal()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <form id="edit-notes-form" class="space-y-4">
                    <input type="hidden" id="edit-booking-id">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1" for="edit-notes">
                            Notes
                        </label>
                        <textarea id="edit-notes" rows="4" 
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Add notes about this booking..."></textarea>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" onclick="closeEditNotesModal()" 
                            class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit" 
                            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-bold">isked</h1>
                </div>
                <div class="flex items-center">
                    <span class="mr-4"><%= user.email %></span>
                    <a href="/auth/logout" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <div class="max-w-7xl mx-auto px-4 py-6">
        <!-- Calendar -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <div id="calendar"></div>
        </div>

        <!-- Upcoming Bookings -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Upcoming Bookings</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Date</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Time</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Name</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Notes</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Action</th>
                        </tr>
                    </thead>
                    <tbody id="upcoming-bookings" class="divide-y divide-gray-200">
                        <!-- Bookings will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Availability Settings -->
        <div class="bg-white rounded-lg shadow mb-6">
            <!-- Toggle Header -->
            <button id="availability-toggle" class="w-full flex items-center justify-between p-6 focus:outline-none">
                <h2 class="text-xl font-semibold">Availability Settings</h2>
                <svg id="toggle-arrow" class="w-6 h-6 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </button>

            <!-- Settings Content -->
            <div id="availability-content" class="hidden p-6 pt-0 border-t">
                <form id="availability-form">
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-4">Working Days</h3>
                        <div class="space-y-4">
                            <% ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].forEach((day, index) => { %>
                                <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 pb-3 border-b last:border-0">
                                    <div class="flex items-center w-full sm:w-1/3">
                                        <input type="checkbox" id="day-<%= index %>" name="working_days" value="<%= index %>" class="w-4 h-4 mr-3">
                                        <label for="day-<%= index %>" class="text-gray-700"><%= day %></label>
                                    </div>
                                    <div class="flex flex-wrap items-center gap-3 w-full sm:w-2/3">
                                        <input type="time" class="work-start border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="09:00" disabled>
                                        <span class="text-gray-500 px-2">to</span>
                                        <input type="time" class="work-end border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="17:00" disabled>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>

                    <div class="mb-8">
                        <h3 class="text-lg font-medium mb-4">Universal Break Time</h3>
                        <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 pb-3">
                            <div class="flex items-center w-full sm:w-1/3">
                                <input type="checkbox" id="break-enabled" class="w-4 h-4 mr-3">
                                <label for="break-enabled" class="text-gray-700">Enable Break Time</label>
                            </div>
                            <div class="flex flex-wrap items-center gap-3 w-full sm:w-2/3">
                                <input type="time" id="break-start" class="border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="12:00" disabled>
                                <span class="text-gray-500 px-2">to</span>
                                <input type="time" id="break-end" class="border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="13:00" disabled>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-4 rounded-lg transition-colors">
                        Save Settings
                    </button>
                </form>

                <div class="mt-8 pt-6 border-t">
                    <h3 class="text-lg font-medium mb-4">Your Booking Link</h3>
                    <div class="flex flex-col space-y-4">
                        <div class="flex items-center space-x-2">
                            <input type="text" readonly value="isked.app/booking/<%= user.username %>" class="flex-1 border rounded-lg px-4 py-2 bg-gray-50 text-gray-600">
                            <button onclick="copyBookingLink()" class="bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-lg transition-colors">
                                Copy
                            </button>
                        </div>
                        <div>
                            <button onclick="showUsernameModal()" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                Change Username
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentBookingId = null;
        let calendarInstance = null;

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize FullCalendar
            var calendarEl = document.getElementById('calendar');
            calendarInstance = new FullCalendar.Calendar(calendarEl, {
                initialView: window.innerWidth < 768 ? 'timeGridDay' : 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,today,next',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                views: {
                    dayGridMonth: {
                        titleFormat: { year: 'numeric', month: 'short' }
                    },
                    timeGridWeek: {
                        titleFormat: { year: 'numeric', month: 'short', day: '2-digit' }
                    },
                    timeGridDay: {
                        titleFormat: { year: 'numeric', month: 'short', day: '2-digit' }
                    }
                },
                windowResize: function(arg) {
                    if (arg.view.type === 'dayGridMonth' && window.innerWidth < 768) {
                        calendarInstance.changeView('timeGridDay');
                    } else if (arg.view.type === 'timeGridDay' && window.innerWidth >= 768) {
                        calendarInstance.changeView('dayGridMonth');
                    }
                },
                events: function(info, successCallback, failureCallback) {
                    fetch('/dashboard/bookings')
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to fetch events');
                            }
                            return response.json();
                        })
                        .then(events => {
                            console.log('Raw events from server:', events);
                            successCallback(events);
                        })
                        .catch(error => {
                            console.error('Error fetching events:', error);
                            failureCallback(error);
                        });
                },
                timeZone: 'Asia/Manila',
                loading: function(isLoading) {
                    console.log('Calendar loading:', isLoading);
                },
                eventSourceSuccess: function(content, xhr) {
                    console.log('Event source data:', content);
                    return content;
                },
                slotMinTime: '08:00:00',
                slotMaxTime: '20:00:00',
                allDaySlot: false,
                slotDuration: '00:30:00',
                initialDate: '2025-06-02',
                displayEventTime: true,
                displayEventEnd: true,
                eventTimeFormat: {
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short',
                    hour12: true
                },
                eventContent: function(arg) {
                    console.log('Rendering event:', arg.event);
                    const startTime = formatTimeShort(arg.event.extendedProps.start_time);
                    const endTime = formatTimeShort(arg.event.extendedProps.end_time);
                    
                    return {
                        html: `
                            <div class="fc-content p-1 overflow-hidden h-full">
                                <div class="text-xs font-medium text-gray-900 flex items-center gap-2">
                                    <span>${startTime} - ${endTime}</span>
                                    <span class="font-semibold">${arg.event.title}</span>
                                </div>
                            </div>
                        `
                    };
                },
                eventDidMount: function(info) {
                    console.log('Event mounted:', {
                        id: info.event.id,
                        title: info.event.title,
                        start: info.event.start,
                        end: info.event.end,
                        extendedProps: info.event.extendedProps
                    });
                    // Add hover effect and styling to events
                    info.el.style.backgroundColor = '#4299e1';
                    info.el.style.borderColor = '#3182ce';
                    info.el.style.color = 'white';
                    info.el.style.cursor = 'pointer';
                    
                    // Add hover effect
                    info.el.addEventListener('mouseover', function() {
                        this.style.backgroundColor = '#3182ce';
                    });
                    info.el.addEventListener('mouseout', function() {
                        this.style.backgroundColor = '#4299e1';
                    });
                },
                eventClick: function(info) {
                    showBookingDetails(info.event);
                },
                dayMaxEvents: false, // Allow all events to be displayed
                height: 'auto', // Adjust height automatically
                contentHeight: 'auto',
                expandRows: true, // Expand rows to fit all events
                handleWindowResize: true,
                windowResizeDelay: 200,
                nowIndicator: true, // Show current time indicator
                businessHours: {
                    daysOfWeek: [0, 1, 2, 3, 4, 5, 6],
                    startTime: '09:00',
                    endTime: '17:00'
                }
            });
            calendarInstance.render();

            // Handle working days checkboxes
            document.querySelectorAll('input[name="working_days"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const dayIndex = this.value;
                    const timeInputs = this.closest('div.flex').nextElementSibling;
                    const inputs = timeInputs.querySelectorAll('input[type="time"]');
                    inputs.forEach(input => {
                        input.disabled = !this.checked;
                    });
                });
            });

            // Handle universal break toggle
            const breakEnabled = document.getElementById('break-enabled');
            const breakStart = document.getElementById('break-start');
            const breakEnd = document.getElementById('break-end');
            
            breakEnabled.addEventListener('change', function() {
                breakStart.disabled = !this.checked;
                breakEnd.disabled = !this.checked;
            });

            // Initialize availability toggle
            const availabilityToggle = document.getElementById('availability-toggle');
            const availabilityContent = document.getElementById('availability-content');
            const toggleArrow = document.getElementById('toggle-arrow');
            let hasExistingSettings = false;

            // Load availability settings
            fetch('/dashboard/availability')
                .then(response => response.json())
                .then(data => {
                    // Populate form with current settings
                    data.availability.forEach(a => {
                        const checkbox = document.getElementById(`day-${a.day_of_week}`);
                        checkbox.checked = true;
                        hasExistingSettings = true;
                        
                        const timeInputs = checkbox.closest('div.flex').nextElementSibling;
                        const workStart = timeInputs.querySelector('.work-start');
                        const workEnd = timeInputs.querySelector('.work-end');
                        workStart.disabled = false;
                        workEnd.disabled = false;
                        workStart.value = a.start_time;
                        workEnd.value = a.end_time;
                    });

                    // Populate universal break time if any breaks exist
                    if (data.breaks && data.breaks.length > 0) {
                        const firstBreak = data.breaks[0];
                        breakEnabled.checked = true;
                        breakStart.disabled = false;
                        breakEnd.disabled = false;
                        breakStart.value = firstBreak.start_time;
                        breakEnd.value = firstBreak.end_time;
                    }

                    // Show settings panel if no settings exist
                    if (!hasExistingSettings) {
                        availabilityContent.classList.remove('hidden');
                        toggleArrow.classList.add('rotate-180');
                    }
                });

            // Handle toggle click
            availabilityToggle.addEventListener('click', function() {
                availabilityContent.classList.toggle('hidden');
                toggleArrow.classList.toggle('rotate-180');
            });

            // Handle form submission
            document.getElementById('availability-form').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const availability = [];
                const breaks = [];
                
                document.querySelectorAll('input[name="working_days"]:checked').forEach(checkbox => {
                    const dayIndex = checkbox.value;
                    const timeInputs = checkbox.closest('div.flex').nextElementSibling;
                    
                    availability.push({
                        day_of_week: parseInt(dayIndex),
                        start_time: timeInputs.querySelector('.work-start').value,
                        end_time: timeInputs.querySelector('.work-end').value
                    });
                });

                // Add universal break time to all working days if enabled
                if (breakEnabled.checked) {
                    const breakStart = document.getElementById('break-start').value;
                    const breakEnd = document.getElementById('break-end').value;
                    
                    document.querySelectorAll('input[name="working_days"]:checked').forEach(checkbox => {
                        breaks.push({
                            day_of_week: parseInt(checkbox.value),
                            start_time: breakStart,
                            end_time: breakEnd
                        });
                    });
                }

                fetch('/dashboard/availability', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ availability, breaks })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        toast.show({
                            type: 'success',
                            title: 'Success',
                            message: 'Settings saved successfully!'
                        });
                        // Collapse settings panel after successful save
                        availabilityContent.classList.add('hidden');
                        toggleArrow.classList.remove('rotate-180');
                    }
                });
            });

            // Load upcoming bookings
            loadUpcomingBookings();
        });

        function formatTimeShort(timeStr) {
            if (!timeStr) return '';
            const [time, period] = timeStr.split(' ');
            if (period) {
                // Already in AM/PM format
                const [hours, minutes] = time.split(':');
                return `${parseInt(hours)}${minutes !== '00' ? ':' + minutes : ''}${period}`;
            }
            const [hours, minutes] = time.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const hour12 = hour % 12 || 12;
            return `${hour12}${minutes !== '00' ? ':' + minutes : ''}${ampm}`;
        }

        function showBookingDetails(event) {
            currentBookingId = event.id;
            const details = event.extendedProps;
            
            const detailsHtml = `
                <div class="space-y-4">
                    <div class="flex justify-between items-center py-2 border-b">
                        <span class="text-gray-600">Date:</span>
                        <span class="font-medium">${event.start.toLocaleDateString()}</span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b">
                        <span class="text-gray-600">Time:</span>
                        <span class="font-medium">${formatTimeShort(details.start_time)} - ${formatTimeShort(details.end_time)}</span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b">
                        <span class="text-gray-600">Client:</span>
                        <span class="font-medium">${details.client_name}</span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b">
                        <span class="text-gray-600">Email:</span>
                        <span class="font-medium break-all">${details.client_email}</span>
                    </div>
                    ${details.client_phone ? `
                    <div class="flex justify-between items-center py-2 border-b">
                        <span class="text-gray-600">Phone:</span>
                        <span class="font-medium">${details.client_phone}</span>
                    </div>
                    ` : ''}
                    ${details.notes ? `
                    <div class="py-2 border-b">
                        <span class="text-gray-600 block mb-1">Notes:</span>
                        <span class="font-medium block">${details.notes}</span>
                    </div>
                    ` : ''}
                </div>
            `;
            
            document.getElementById('booking-details').innerHTML = detailsHtml;
            const modal = document.getElementById('booking-modal');
            modal.classList.remove('hidden');
            modal.style.display = 'block';

            // Add click event listener to close modal when clicking outside
            const handleOutsideClick = function(e) {
                if (e.target === modal) {
                    closeBookingModal();
                }
            };
            modal.removeEventListener('click', handleOutsideClick);
            modal.addEventListener('click', handleOutsideClick);
        }

        function closeBookingModal() {
            const modal = document.getElementById('booking-modal');
            modal.classList.add('hidden');
            modal.style.display = 'none';
            currentBookingId = null;
        }

        function deleteBooking() {
            if (!currentBookingId) {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'No booking selected'
                });
                return;
            }
            
            if (confirm('Are you sure you want to delete this booking?')) {
                fetch(`/dashboard/bookings/${currentBookingId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => Promise.reject(err.error || 'Failed to delete booking'));
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        closeBookingModal();
                        if (calendarInstance) {
                            calendarInstance.refetchEvents();
                        } else {
                            window.location.reload();
                        }
                        toast.show({
                            type: 'success',
                            title: 'Success',
                            message: 'Booking deleted successfully'
                        });
                    } else {
                        throw new Error(data.error || 'Failed to delete booking');
                    }
                })
                .catch(error => {
                    console.error('Error deleting booking:', error);
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: typeof error === 'string' ? error : 'Failed to delete booking'
                    });
                });
            }
        }

        // Add keyboard event listener to close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeBookingModal();
            }
        });

        function showUsernameModal() {
            const modal = document.getElementById('username-modal');
            modal.classList.remove('hidden');
            modal.style.display = 'block';
        }

        function closeUsernameModal() {
            const modal = document.getElementById('username-modal');
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }

        document.getElementById('username-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const newUsername = document.getElementById('new-username').value;
            
            fetch('/dashboard/username', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username: newUsername })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeUsernameModal();
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Username updated successfully'
                    });
                    // Update the booking link display
                    document.querySelector('input[readonly]').value = `isked.app/booking/${newUsername}`;
                } else {
                    throw new Error(data.error || 'Failed to update username');
                }
            })
            .catch(error => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update username'
                });
            });
        });

        function copyBookingLink() {
            const link = document.querySelector('input[readonly]').value;
            navigator.clipboard.writeText(link).then(() => {
                toast.show({
                    type: 'success',
                    title: 'Success',
                    message: 'Booking link copied to clipboard!'
                });
            }).catch(() => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to copy booking link'
                });
            });
        }

        // Function to load upcoming bookings
        function loadUpcomingBookings() {
            fetch('/dashboard/bookings/upcoming')
                .then(response => response.json())
                .then(bookings => {
                    const tbody = document.getElementById('upcoming-bookings');
                    tbody.innerHTML = '';

                    bookings.forEach(booking => {
                        const date = new Date(booking.date);
                        const row = document.createElement('tr');
                        row.className = 'hover:bg-gray-50';
                        row.innerHTML = `
                            <td class="px-4 py-3 text-sm text-gray-900">
                                ${date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                            </td>
                            <td class="px-4 py-3 text-sm text-gray-900">
                                ${formatTimeShort(booking.start_time)}
                            </td>
                            <td class="px-4 py-3 text-sm text-gray-900">
                                ${booking.client_name}
                            </td>
                            <td class="px-4 py-3 text-sm text-gray-600">
                                ${booking.notes ? booking.notes : '<span class="italic text-gray-400">No notes yet</span>'}
                            </td>
                            <td class="px-4 py-3 text-sm">
                                <button onclick="showEditNotesModal('${booking.id}', ${JSON.stringify(booking.notes)})" 
                                    class="text-blue-600 hover:text-blue-800 font-medium">
                                    Edit
                                </button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error loading upcoming bookings:', error);
                });
        }

        // Function to show edit notes modal
        function showEditNotesModal(bookingId, notes) {
            document.getElementById('edit-booking-id').value = bookingId;
            document.getElementById('edit-notes').value = notes || '';
            const modal = document.getElementById('edit-notes-modal');
            modal.classList.remove('hidden');
            modal.style.display = 'block';
        }

        // Function to close edit notes modal
        function closeEditNotesModal() {
            const modal = document.getElementById('edit-notes-modal');
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }

        // Handle edit notes form submission
        document.getElementById('edit-notes-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const bookingId = document.getElementById('edit-booking-id').value;
            const notes = document.getElementById('edit-notes').value;

            fetch(`/dashboard/bookings/${bookingId}/notes`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ notes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeEditNotesModal();
                    loadUpcomingBookings();
                    if (calendarInstance) {
                        calendarInstance.refetchEvents();
                    }
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Notes updated successfully'
                    });
                } else {
                    throw new Error(data.error || 'Failed to update notes');
                }
            })
            .catch(error => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update notes'
                });
            });
        });

        // Add keyboard event listener to close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditNotesModal();
            }
        });
    </script>
</body>
</html> 