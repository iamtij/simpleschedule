<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>isked - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
    <link href="/css/toast.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="/js/toast.js" defer></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        /* Calendar Container */
        .fc {
            background: #FAFAFA;
            border-radius: 6px;
            overflow: hidden;
        }

        /* Grid lines and borders */
        .fc th,
        .fc td {
            border-color: #E5E7EB !important;
        }

        /* Event styling */
        .fc-event {
            border-radius: 6px !important;
            padding: 2px 6px !important;
            margin: 1px 2px !important;
            min-height: 24px !important;
            border: none !important;
            background-color: #E0F2FE !important;
            color: #0369A1 !important;
            cursor: pointer !important;
            overflow: hidden !important;
        }

        .fc-event:hover {
            background-color: #BAE6FD !important;
        }

        .fc-event-title {
            white-space: normal !important;
            word-wrap: break-word !important;
            overflow: hidden !important;
            line-height: 1.2 !important;
            display: block !important;
        }

        .fc-event-time {
            white-space: nowrap !important;
            display: inline-block !important;
            margin-right: 4px !important;
        }

        /* Add consistent styling for time grid events */
        .fc-timegrid-event {
            background-color: #E0F2FE !important;
            border: none !important;
            margin: 1px 0 !important;
            overflow: hidden !important;
        }

        .fc-timegrid-event:hover {
            background-color: #BAE6FD !important;
        }

        .fc-timegrid-event .fc-event-main {
            padding: 2px 6px !important;
            color: #0369A1 !important;
            overflow: hidden !important;
        }

        .fc-timegrid-event .fc-event-title {
            white-space: normal !important;
            word-wrap: break-word !important;
            overflow: hidden !important;
            line-height: 1.2 !important;
            display: block !important;
        }

        .fc-timegrid-event .fc-event-time {
            white-space: nowrap !important;
            display: inline-block !important;
            margin-right: 4px !important;
        }

        /* Style the time slots */
        .fc-timegrid-slot {
            height: 40px !important;
            border-color: #E5E7EB !important;
        }

        /* Background color for time grid */
        .fc-timegrid-col {
            background-color: #FAFAFA !important;
        }

        /* Current time indicator */
        .fc-timegrid-now-indicator-line {
            border-color: #10B981 !important;
        }

        .fc-timegrid-now-indicator-arrow {
            border-color: #10B981 !important;
            color: #10B981 !important;
        }

        /* Today highlight */
        .fc-day-today {
            background-color: #ECFDF5 !important;
        }

        .fc-day-today .fc-daygrid-day-frame,
        .fc-day-today .fc-timegrid-col-frame {
            border: 1px solid #10B981 !important;
            border-radius: 6px;
        }

        /* Header styling */
        .fc-toolbar-title {
            color: #111827 !important;
            font-weight: 600 !important;
        }

        .fc-button-primary {
            background-color: white !important;
            border-color: #E5E7EB !important;
            color: #374151 !important;
            font-weight: 500 !important;
            padding: 0.5rem 1rem !important;
            border-radius: 6px !important;
        }

        .fc-button-primary:hover {
            background-color: #F3F4F6 !important;
            border-color: #D1D5DB !important;
        }

        .fc-button-primary:not(:disabled).fc-button-active,
        .fc-button-primary:not(:disabled):active {
            background-color: #F3F4F6 !important;
            border-color: #D1D5DB !important;
            color: #111827 !important;
        }

        /* Mobile optimizations */
        @media (max-width: 640px) {
            .fc-header-toolbar {
                display: flex !important;
                flex-direction: column !important;
                align-items: stretch !important;
                gap: 0.75rem !important;
            }

            .fc-toolbar-chunk {
                display: flex !important;
                justify-content: center !important;
                width: 100% !important;
            }

            /* Reorder toolbar chunks */
            .fc-toolbar-chunk:nth-child(2) { order: 1; } /* Title (Month Year) */
            .fc-toolbar-chunk:nth-child(1) { order: 2; } /* Navigation (prev, today, next) */
            .fc-toolbar-chunk:nth-child(3) { order: 3; } /* View buttons */

            .fc-toolbar-title {
                font-size: 1.5rem !important;
                font-weight: 600 !important;
                text-align: center !important;
                width: 100% !important;
            }

            /* Adjust navigation buttons spacing */
            .fc-prev-button,
            .fc-next-button,
            .fc-today-button {
                padding: 0.5rem 1rem !important;
            }

            /* Make view buttons more prominent */
            .fc-button-group {
                width: 100% !important;
                display: flex !important;
                gap: 0.5rem !important;
            }

            .fc-button-group .fc-button {
                flex: 1 !important;
            }

            .fc-event {
                font-size: 11px !important;
            }
            
            .fc-event-title {
                display: block !important;
                overflow: hidden !important;
                text-overflow: ellipsis !important;
            }
        }

        /* Desktop event styling */
        @media (min-width: 641px) {
            .fc-event-title,
            .fc-event-time {
                display: inline !important;
            }
        }

        /* Modal styling */
        .modal-overlay {
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
        }

        @media (max-width: 768px) {
        .modal-content {
                max-width: 90% !important;
                min-width: unset !important;
                margin: 0 auto;
            }
        }

        /* Smooth transitions */
        .modal-content {
            transform: scale(0.95);
        }

        #booking-modal:not(.hidden) .modal-content {
            transform: scale(1);
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Booking Details Modal -->
    <div id="booking-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm modal-overlay hidden z-50 flex items-center justify-center p-4">
        <div class="w-full max-w-[700px] min-w-[420px] bg-white rounded-xl shadow-2xl modal-content transform transition-transform duration-200 scale-95">
            <!-- Header -->
            <div class="flex justify-between items-center p-6 border-b">
                <h3 class="text-xl font-semibold text-gray-800">Booking Details</h3>
                    <button onclick="closeBookingModal()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>

            <!-- Content -->
            <div class="p-6">
                <div class="lg:grid lg:grid-cols-12 lg:gap-6">
                    <!-- Main Content (Left) -->
                    <div class="lg:col-span-4">
                        <!-- Schedule Section -->
                        <div class="space-y-6">
                            <div class="bg-gray-50 rounded-lg p-5 space-y-6">
                                <h4 class="font-medium text-gray-700 flex items-center gap-2">
                                    <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    Schedule
                                </h4>
                                <div class="space-y-3">
                                    <div>
                                        <span class="text-sm text-gray-500 flex items-center gap-2">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                            </svg>
                                            Date
                                        </span>
                                        <div class="font-medium booking-date mt-1"></div>
                                    </div>
                                    <div>
                                        <span class="text-sm text-gray-500 flex items-center gap-2">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            Time
                                        </span>
                                        <div class="font-medium booking-time mt-1"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Client Info Section -->
                            <div class="bg-gray-50 rounded-lg p-5 space-y-4">
                                <h4 class="font-medium text-gray-700 flex items-center gap-2">
                                    <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    Client Info
                                </h4>
                                <div class="space-y-3">
                                    <div>
                                        <span class="text-sm text-gray-500 flex items-center gap-2">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                            </svg>
                                            Name
                                        </span>
                                        <div class="font-medium booking-client mt-1"></div>
                                    </div>
                                    <div>
                                        <span class="text-sm text-gray-500 flex items-center gap-2">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                            </svg>
                                            Email
                                        </span>
                                        <a href="#" class="font-medium booking-email mt-1 text-blue-600 hover:text-blue-800 break-all"></a>
                                    </div>
                                    <div>
                                        <span class="text-sm text-gray-500 flex items-center gap-2">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                            </svg>
                                            Phone
                                        </span>
                                        <div class="font-medium booking-phone mt-1 cursor-pointer" onclick="copyPhoneNumber(this)"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Notes (Right) -->
                    <div class="lg:col-span-8 mt-6 lg:mt-0">
                        <div class="space-y-3">
                            <label class="block text-gray-600 font-medium" for="booking-notes">Notes:</label>
                            <textarea id="booking-notes" rows="12" 
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                                placeholder="Write any notes for this booking..."></textarea>
                            <div class="text-sm text-gray-500 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span class="last-updated">Last updated: Not yet saved</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Footer -->
            <div class="border-t p-4 sm:p-6">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3">
                    <!-- Save Changes - Primary Action -->
                    <button onclick="saveBookingNotes()" 
                        class="w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 sm:py-2.5 px-4 rounded-lg transition-colors flex items-center justify-center gap-2 order-1">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        Save Changes
                    </button>

                    <!-- Delete Booking - Danger Action -->
                    <button onclick="deleteBooking()" 
                        class="w-full sm:w-auto bg-red-500 hover:bg-red-600 text-white font-medium py-3 sm:py-2.5 px-4 rounded-lg transition-colors flex items-center justify-center gap-2 order-3">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                        Delete Booking
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Username Change Modal -->
    <div id="username-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 modal-overlay hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white modal-content">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Change Username</h3>
                    <button onclick="closeUsernameModal()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <form id="username-form" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1" for="new-username">
                            New Username
                        </label>
                        <input class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                            id="new-username" name="new-username" type="text" required
                            pattern="^[a-zA-Z0-9_-]+$"
                            title="Username can only contain letters, numbers, underscores and hyphens"
                            placeholder="Enter new username">
                        <p class="mt-1 text-sm text-gray-500">Your new booking link will be: isked.app/booking/<span class="text-gray-700">username</span></p>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" onclick="closeUsernameModal()" 
                            class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit" 
                            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Notes Modal -->
    <div id="edit-notes-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 modal-overlay hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white modal-content">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Edit Booking Notes</h3>
                    <button onclick="closeEditNotesModal()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <form id="edit-notes-form" class="space-y-4">
                    <input type="hidden" id="edit-booking-id">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1" for="edit-notes">
                            Notes
                        </label>
                        <textarea id="edit-notes" rows="4" 
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Add notes about this booking..."></textarea>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" onclick="closeEditNotesModal()" 
                            class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit" 
                            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="delete-confirmation-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm modal-overlay hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-auto">
            <div class="p-6">
                <div class="flex items-center justify-center mb-4">
                    <div class="w-12 h-12 rounded-full bg-red-100 flex items-center justify-center">
                        <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                        </svg>
                    </div>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 text-center mb-2">Delete Booking</h3>
                <p class="text-gray-600 text-center mb-6">Are you sure you want to delete this booking? This action cannot be undone.</p>
                <div class="flex justify-center space-x-3">
                    <button onclick="closeDeleteConfirmation()" 
                        class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors flex-1">
                        Cancel
                    </button>
                    <button onclick="confirmDelete()" 
                        class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors flex-1">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-bold">isked</h1>
                </div>
                <div class="flex items-center">
                    <div class="relative">
                        <button id="account-menu-button" 
                            class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 transition-colors"
                            aria-expanded="false">
                            <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                            </div>
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>

                        <!-- Dropdown Menu -->
                        <div id="account-menu" 
                            class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-1 hidden z-50"
                            role="menu">
                            <button onclick="showAccountSettings()" 
                                class="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 transition-colors"
                                role="menuitem">
                                Account Settings
                            </button>
                            <div class="h-px bg-gray-200 my-1"></div>
                            <a href="/auth/logout" 
                                class="block px-4 py-2 text-red-600 hover:bg-red-50 transition-colors"
                                role="menuitem">
                                Log Out
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Account Settings Modal -->
    <div id="account-settings-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm modal-overlay hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-[480px] shadow-lg rounded-lg bg-white modal-content">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-semibold text-gray-800">Account Settings</h3>
                    <button onclick="closeAccountSettings()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <form id="account-settings-form" class="space-y-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1" for="full-name">
                            Full Name
                        </label>
                        <input type="text" id="full-name" name="full-name"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Enter your full name"
                            value="<%= user.full_name || '' %>">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                            Email Address
                        </label>
                        <div class="w-full px-4 py-2 bg-gray-50 border border-gray-200 rounded-lg text-gray-600">
                            <%= user.email %>
                        </div>
                        <p class="mt-1 text-sm text-gray-500">Email address cannot be changed</p>
                    </div>

                    <!-- Booking Link Section -->
                    <div class="mt-6 pt-6 border-t">
                        <h3 class="text-lg font-medium mb-4">Your Booking Link</h3>
                        <div class="flex flex-col space-y-4">
                            <div class="flex items-center space-x-2">
                                <input type="text" readonly value="isked.app/booking/<%= user.username %>" class="flex-1 border rounded-lg px-4 py-2 bg-gray-50 text-gray-600">
                                <button onclick="copyBookingLink()" class="bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-lg transition-colors">
                                    Copy
                                </button>
                            </div>
                            <div>
                                <button onclick="showUsernameModal()" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                    Change Username
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-end space-x-2 pt-4">
                        <button type="button" onclick="closeAccountSettings()"
                            class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit"
                            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 py-6">
        <!-- Calendar -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <div id="calendar"></div>
        </div>

        <!-- Upcoming Bookings -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Upcoming Bookings</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Date</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Time</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Name</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Notes</th>
                            <th class="px-4 py-3 text-left text-sm font-medium text-gray-600">Action</th>
                        </tr>
                    </thead>
                    <tbody id="upcoming-bookings" class="divide-y divide-gray-200">
                        <!-- Bookings will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Availability Settings -->
        <div class="bg-white rounded-lg shadow mb-6">
            <!-- Toggle Header -->
            <button id="availability-toggle" class="w-full flex items-center justify-between p-6 focus:outline-none">
                <h2 class="text-xl font-semibold">Availability Settings</h2>
                <svg id="toggle-arrow" class="w-6 h-6 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </button>

            <!-- Settings Content -->
            <div id="availability-content" class="hidden p-6 pt-0 border-t">
            <form id="availability-form">
                <div class="mb-6">
                    <h3 class="text-lg font-medium mb-4">Working Days</h3>
                    <div class="space-y-4">
                        <% ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].forEach((day, index) => { %>
                            <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 pb-3 border-b last:border-0">
                                <div class="flex items-center w-full sm:w-1/3">
                                    <input type="checkbox" id="day-<%= index %>" name="working_days" value="<%= index %>" class="w-4 h-4 mr-3">
                                    <label for="day-<%= index %>" class="text-gray-700"><%= day %></label>
                                </div>
                                <div class="flex flex-wrap items-center gap-3 w-full sm:w-2/3">
                                    <input type="time" class="work-start border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="09:00" disabled>
                                    <span class="text-gray-500 px-2">to</span>
                                    <input type="time" class="work-end border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="17:00" disabled>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <div class="mb-8">
                    <h3 class="text-lg font-medium mb-4">Universal Breaks</h3>
                    <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 pb-3">
                        <div class="flex items-center w-full sm:w-1/3">
                            <input type="checkbox" id="break-enabled" class="w-4 h-4 mr-3">
                            <label for="break-enabled" class="text-gray-700">Enable Break Time</label>
                        </div>
                        <div class="flex flex-wrap items-center gap-3 w-full sm:w-2/3">
                            <input type="time" id="break-start" class="border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="12:00" disabled>
                            <span class="text-gray-500 px-2">to</span>
                            <input type="time" id="break-end" class="border rounded px-3 py-2 text-sm w-36 disabled:bg-gray-50 disabled:text-gray-400" value="13:00" disabled>
                        </div>
                    </div>

                    <!-- Buffer Between Bookings -->
                    <div class="mt-6 border-t pt-6">
                        <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
                            <div class="w-full sm:w-1/3">
                                <label for="buffer-minutes" class="text-gray-700 font-medium">Buffer Between Bookings</label>
                                <p class="text-sm text-gray-500 mt-1">Add padding time after each booking</p>
                            </div>
                            <div class="w-full sm:w-2/3">
                                <select id="buffer-minutes" class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <option value="0">No buffer</option>
                                    <option value="10">10 minutes</option>
                                    <option value="15">15 minutes</option>
                                    <option value="30">30 minutes</option>
                                    <option value="45">45 minutes</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-4 rounded-lg transition-colors">
                    Save Settings
                </button>
            </form>
            </div>
        </div>
    </div>

    <script>
        let currentBookingId = null;
        let calendarInstance = null;
        let justSwitchedToDay = false;

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize FullCalendar
            var calendarEl = document.getElementById('calendar');
            calendarInstance = new FullCalendar.Calendar(calendarEl, {
                initialView: window.innerWidth < 768 ? 'timeGridDay' : 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,today,next',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                views: {
                    dayGridMonth: {
                        titleFormat: { year: 'numeric', month: 'long' }
                    },
                    timeGridWeek: {
                        titleFormat: { year: 'numeric', month: 'long', day: '2-digit' }
                    },
                    timeGridDay: {
                        titleFormat: { year: 'numeric', month: 'long', day: '2-digit' }
                    }
                },
                events: function(info, successCallback, failureCallback) {
                    console.log('Fetching events...');
                    fetch('/dashboard/bookings')
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to fetch events');
                            }
                            return response.json();
                        })
                        .then(events => {
                            console.log('Events received:', events);
                            successCallback(events);
                        })
                        .catch(error => {
                            console.error('Error fetching events:', error);
                            failureCallback(error);
                        });
                },
                timeZone: 'Asia/Manila',
                slotMinTime: '06:00:00',
                slotMaxTime: '24:00:00',
                eventTimeFormat: {
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short',
                    hour12: true
                },
                dayMaxEvents: true,
                eventContent: function(arg) {
                    console.log('Rendering event:', arg.event);
                    const startTime = formatTimeShort(arg.event.extendedProps.start_time);
                    const endTime = formatTimeShort(arg.event.extendedProps.end_time);
                    const isMobile = window.innerWidth <= 640;
                    
                    // Mobile view
                    if (isMobile) {
                        // Day view - show full details
                        if (arg.view.type === 'timeGridDay') {
                            return {
                                html: `
                                    <div class="fc-content p-1">
                                        <div class="text-xs font-medium">
                                            <div class="fc-event-time">${startTime} - ${endTime}</div>
                                            <div class="fc-event-title">${arg.event.title}</div>
                                        </div>
                                    </div>
                                `
                            };
                        }
                        // Month/Week view - show only start time
                        return {
                            html: `
                                <div class="fc-content p-1">
                                    <div class="text-xs font-medium">
                                        <div class="fc-event-time">${startTime}</div>
                                    </div>
                                </div>
                            `
                        };
                    }
                    
                    // Desktop view - always show full details
                    return {
                        html: `
                            <div class="fc-content p-1">
                                <div class="text-xs font-medium">
                                    <div class="fc-event-time">${startTime} - ${endTime}</div>
                                    <div class="fc-event-title">${arg.event.title}</div>
                                </div>
                            </div>
                        `
                    };
                },
                eventDidMount: function(info) {
                    // No need for additional classes since we're using a single style
                },
                eventClick: function(info) {
                    showBookingDetails(info.event);
                },
                allDaySlot: false,
                slotDuration: '00:30:00',
                initialDate: new Date(),
                displayEventTime: true,
                displayEventEnd: true,
                eventDidMount: function(info) {
                    // No need for additional classes since we're using a single style
                },
                eventClick: function(info) {
                    showBookingDetails(info.event);
                },
                dayMaxEvents: false, // Allow all events to be displayed
                height: 'auto', // Adjust height automatically
                contentHeight: 'auto',
                expandRows: true, // Expand rows to fit all events
                handleWindowResize: true,
                windowResizeDelay: 200,
                nowIndicator: true, // Show current time indicator
                businessHours: {
                    daysOfWeek: [0, 1, 2, 3, 4, 5, 6],
                    startTime: '09:00',
                    endTime: '17:00'
                },
                datesSet: function(info) {
                    if (info.view.type === 'timeGridDay') {
                        const today = new Date();
                        if (
                            info.start.getDate() !== today.getDate() ||
                            info.start.getMonth() !== today.getMonth() ||
                            info.start.getFullYear() !== today.getFullYear()
                        ) {
                            if (!justSwitchedToDay) {
                                justSwitchedToDay = true;
                                calendarInstance.gotoDate(today);
                            }
                        } else {
                            justSwitchedToDay = false;
                        }
                    } else {
                        justSwitchedToDay = false;
                    }
                },
            });
            calendarInstance.render();

            // Attach handler initially
            attachDayButtonHandler();

            // Observe toolbar for changes and re-attach handler if needed
            const toolbar = document.querySelector('.fc-header-toolbar');
            if (toolbar) {
                const observer = new MutationObserver(() => {
                    attachDayButtonHandler();
                });
                observer.observe(toolbar, { childList: true, subtree: true });
            }

            // Handle working days checkboxes
            document.querySelectorAll('input[name="working_days"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const dayIndex = this.value;
                    const timeInputs = this.closest('div.flex').nextElementSibling;
                    const inputs = timeInputs.querySelectorAll('input[type="time"]');
                    inputs.forEach(input => {
                        input.disabled = !this.checked;
                    });
                });
            });

            // Handle universal break toggle
            const breakEnabled = document.getElementById('break-enabled');
            const breakStart = document.getElementById('break-start');
            const breakEnd = document.getElementById('break-end');
            
            breakEnabled.addEventListener('change', function() {
                breakStart.disabled = !this.checked;
                breakEnd.disabled = !this.checked;
            });

            // Initialize availability toggle
            const availabilityToggle = document.getElementById('availability-toggle');
            const availabilityContent = document.getElementById('availability-content');
            const toggleArrow = document.getElementById('toggle-arrow');
            let hasExistingSettings = false;

            // Load availability settings
            fetch('/dashboard/availability')
                .then(response => response.json())
                .then(data => {
                    // Populate form with current settings
                    data.availability.forEach(a => {
                        const checkbox = document.getElementById(`day-${a.day_of_week}`);
                        checkbox.checked = true;
                        hasExistingSettings = true;
                        
                        const timeInputs = checkbox.closest('div.flex').nextElementSibling;
                        const workStart = timeInputs.querySelector('.work-start');
                        const workEnd = timeInputs.querySelector('.work-end');
                        workStart.disabled = false;
                        workEnd.disabled = false;
                        workStart.value = a.start_time;
                        workEnd.value = a.end_time;
                    });

                    // Populate universal break time if any breaks exist
                    if (data.breaks && data.breaks.length > 0) {
                        const firstBreak = data.breaks[0];
                        breakEnabled.checked = true;
                        breakStart.disabled = false;
                        breakEnd.disabled = false;
                        breakStart.value = firstBreak.start_time;
                        breakEnd.value = firstBreak.end_time;
                    }

                    // Set buffer minutes if available
                    if (data.buffer_minutes !== undefined) {
                        document.getElementById('buffer-minutes').value = data.buffer_minutes.toString();
                    }

                    // Show settings panel if no settings exist
                    if (!hasExistingSettings) {
                        availabilityContent.classList.remove('hidden');
                        toggleArrow.classList.add('rotate-180');
                    }
                });

            // Handle toggle click
            availabilityToggle.addEventListener('click', function() {
                availabilityContent.classList.toggle('hidden');
                toggleArrow.classList.toggle('rotate-180');
            });

            // Handle form submission
            document.getElementById('availability-form').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const availability = [];
                const breaks = [];
                const bufferMinutes = parseInt(document.getElementById('buffer-minutes').value);
                
                document.querySelectorAll('input[name="working_days"]:checked').forEach(checkbox => {
                    const dayIndex = checkbox.value;
                    const timeInputs = checkbox.closest('div.flex').nextElementSibling;
                    
                    availability.push({
                        day_of_week: parseInt(dayIndex),
                        start_time: timeInputs.querySelector('.work-start').value,
                        end_time: timeInputs.querySelector('.work-end').value
                    });
                });

                // Add universal break time to all working days if enabled
                if (breakEnabled.checked) {
                    const breakStart = document.getElementById('break-start').value;
                    const breakEnd = document.getElementById('break-end').value;
                    
                    document.querySelectorAll('input[name="working_days"]:checked').forEach(checkbox => {
                        breaks.push({
                            day_of_week: parseInt(checkbox.value),
                            start_time: breakStart,
                            end_time: breakEnd
                        });
                    });
                }

                fetch('/dashboard/availability', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ availability, breaks, buffer_minutes: bufferMinutes })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        toast.show({
                            type: 'success',
                            title: 'Success',
                            message: 'Settings saved successfully!'
                        });
                        // Collapse settings panel after successful save
                        availabilityContent.classList.add('hidden');
                        toggleArrow.classList.remove('rotate-180');
                    }
                });
            });

            // Load upcoming bookings
            loadUpcomingBookings();
        });

        function formatTimeShort(timeStr) {
            if (!timeStr) return '';
            const [time, period] = timeStr.split(' ');
            if (period) {
                // Already in AM/PM format
                const [hours, minutes] = time.split(':');
                return `${parseInt(hours)}${minutes !== '00' ? ':' + minutes : ''}${period}`;
            }
            const [hours, minutes] = time.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const hour12 = hour % 12 || 12;
            return `${hour12}${minutes !== '00' ? ':' + minutes : ''}${ampm}`;
        }

        function showBookingDetails(event) {
            currentBookingId = event.id;
            const details = event.extendedProps;
            
            // Format date
            const date = new Date(event.start);
            const formattedDate = date.toLocaleDateString('en-US', {
                weekday: 'short',
                month: 'short',
                day: 'numeric',
                year: 'numeric'
            });

            // Format time
            const startTime = formatTimeShort(details.start_time);
            const endTime = formatTimeShort(details.end_time);
            
            // Update modal content
            document.querySelector('.booking-date').textContent = formattedDate;
            document.querySelector('.booking-time').textContent = `${startTime} - ${endTime}`;
            document.querySelector('.booking-client').textContent = details.client_name;
            
            // Set up email link
            const emailElement = document.querySelector('.booking-email');
            emailElement.textContent = details.client_email;
            emailElement.href = `mailto:${details.client_email}`;
            
            // Set up phone with click-to-copy
            document.querySelector('.booking-phone').textContent = details.client_phone || '—';
            
            // Set up notes
            const notesTextarea = document.getElementById('booking-notes');
            notesTextarea.value = details.notes || '';
            
            // Show modal
            const modal = document.getElementById('booking-modal');
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden'; // Prevent background scrolling

            // Add click outside to close
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeBookingModal();
                }
            });

            // Focus on notes textarea
            setTimeout(() => {
                notesTextarea.focus();
            }, 300);
        }

        function copyPhoneNumber(element) {
            const phone = element.textContent;
            if (phone && phone !== '—') {
                navigator.clipboard.writeText(phone).then(() => {
                    const originalText = element.textContent;
                    element.textContent = 'Copied!';
                    setTimeout(() => {
                        element.textContent = originalText;
                    }, 1500);
                });
            }
        }

        function saveBookingNotes() {
            const notes = document.getElementById('booking-notes').value;
            updateBookingNotes(currentBookingId, notes);
            
            // Update last saved timestamp
            const now = new Date();
            const timeStr = now.toLocaleTimeString('en-US', { 
                hour: 'numeric', 
                minute: '2-digit',
                hour12: true 
            });
            document.querySelector('.last-updated').textContent = `Last updated: ${timeStr}`;

            // Show success toast
            toast.show({
                type: 'success',
                title: 'Changes Saved',
                message: 'Booking notes have been updated successfully'
            });
        }

        function updateBookingNotes(bookingId, notes) {
            fetch(`/dashboard/bookings/${bookingId}/notes`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ notes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Refresh the calendar and upcoming bookings list
                    if (calendarInstance) {
                        calendarInstance.refetchEvents();
                    }
                    loadUpcomingBookings();
                } else {
                    throw new Error(data.error || 'Failed to update notes');
                }
            })
            .catch(error => {
                console.error('Error updating notes:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update notes'
                });
            });
        }

        function closeBookingModal() {
            const modal = document.getElementById('booking-modal');
            modal.classList.add('hidden');
            document.body.style.overflow = ''; // Restore background scrolling
            currentBookingId = null;
        }

        function deleteBooking() {
            if (!currentBookingId) {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'No booking selected'
                });
                return;
            }
            
            // Show delete confirmation modal
            const modal = document.getElementById('delete-confirmation-modal');
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';

            // Add click outside to close
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeDeleteConfirmation();
                }
            });
        }

        function closeDeleteConfirmation() {
            const modal = document.getElementById('delete-confirmation-modal');
            modal.classList.add('hidden');
            document.body.style.overflow = '';
        }

        function confirmDelete() {
            fetch(`/dashboard/bookings/${currentBookingId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => Promise.reject(err.error || 'Failed to delete booking'));
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    closeDeleteConfirmation();
                    closeBookingModal();
                    if (calendarInstance) {
                        calendarInstance.refetchEvents();
                    }
                    loadUpcomingBookings();
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Booking deleted successfully'
                    });
                } else {
                    throw new Error(data.error || 'Failed to delete booking');
                }
            })
            .catch(error => {
                console.error('Error deleting booking:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: typeof error === 'string' ? error : 'Failed to delete booking'
                });
            });
        }

        // Add keyboard event listener to close delete confirmation modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeDeleteConfirmation();
            }
        });

        function showUsernameModal() {
            const modal = document.getElementById('username-modal');
            modal.classList.remove('hidden');
            modal.style.display = 'block';
        }

        function closeUsernameModal() {
            const modal = document.getElementById('username-modal');
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }

        document.getElementById('username-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const newUsername = document.getElementById('new-username').value;
            
            fetch('/dashboard/username', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username: newUsername })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeUsernameModal();
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Username updated successfully'
                    });
                    // Update the booking link display
                    document.querySelector('input[readonly]').value = `isked.app/booking/${newUsername}`;
                } else {
                    throw new Error(data.error || 'Failed to update username');
                }
            })
            .catch(error => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update username'
                });
            });
        });

        function copyBookingLink() {
            const link = document.querySelector('input[readonly]').value;
            
            // Fallback function for older browsers
            const fallbackCopy = () => {
                const textArea = document.createElement('textarea');
                textArea.value = link;
                textArea.style.position = 'fixed';
                textArea.style.left = '-9999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();

                try {
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    return true;
                } catch (err) {
                    document.body.removeChild(textArea);
                    return false;
                }
            };

            // Try the modern API first, fall back to execCommand if not available
            if (!navigator.clipboard) {
                const success = fallbackCopy();
                if (success) {
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Booking link copied to clipboard!'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: 'Failed to copy booking link'
                    });
                }
                return;
            }

            navigator.clipboard.writeText(link).then(() => {
                toast.show({
                    type: 'success',
                    title: 'Success',
                    message: 'Booking link copied to clipboard!'
                });
            }).catch((error) => {
                console.error('Clipboard error:', error);
                // Try fallback if modern API fails
                const success = fallbackCopy();
                if (success) {
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Booking link copied to clipboard!'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: 'Failed to copy booking link'
                    });
                }
            });
        }

        // Function to load upcoming bookings
        function loadUpcomingBookings() {
            fetch('/dashboard/bookings/upcoming')
                .then(response => response.json())
                .then(bookings => {
                    const tbody = document.getElementById('upcoming-bookings');
                    tbody.innerHTML = '';

                    bookings.forEach(booking => {
                        const date = new Date(booking.date);
                        const row = document.createElement('tr');
                        row.className = 'hover:bg-gray-50';
                        row.innerHTML = `
                            <td class="px-4 py-3 text-sm text-gray-900">
                                ${date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', weekday: 'short' })}
                            </td>
                            <td class="px-4 py-3 text-sm text-gray-900">
                                ${formatTimeShort(booking.start_time)}
                            </td>
                            <td class="px-4 py-3 text-sm text-gray-900">
                                ${booking.client_name}
                            </td>
                            <td class="px-4 py-3 text-sm text-gray-600">
                                ${booking.notes ? booking.notes : '<span class="italic text-gray-400">No notes yet</span>'}
                            </td>
                            <td class="px-4 py-3 text-sm">
                                <button onclick="showBookingFromList('${booking.id}')" 
                                    class="text-blue-600 hover:text-blue-800 font-medium">
                                    Edit
                                </button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                })
                .catch(error => {
                    console.error('Error loading upcoming bookings:', error);
                });
        }

        // Function to show booking details from the upcoming bookings list
        function showBookingFromList(bookingId) {
            if (calendarInstance) {
                const event = calendarInstance.getEventById(bookingId);
                if (event) {
                    showBookingDetails(event);
                }
            }
        }

        // Function to show edit notes modal
        function showEditNotesModal(bookingId, notes) {
            document.getElementById('edit-booking-id').value = bookingId;
            document.getElementById('edit-notes').value = notes || '';
            const modal = document.getElementById('edit-notes-modal');
            modal.classList.remove('hidden');
            modal.style.display = 'block';
        }

        // Function to close edit notes modal
        function closeEditNotesModal() {
            const modal = document.getElementById('edit-notes-modal');
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }

        // Handle edit notes form submission
        document.getElementById('edit-notes-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const bookingId = document.getElementById('edit-booking-id').value;
            const notes = document.getElementById('edit-notes').value;

            fetch(`/dashboard/bookings/${bookingId}/notes`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ notes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeEditNotesModal();
                    loadUpcomingBookings();
                    if (calendarInstance) {
                        calendarInstance.refetchEvents();
                    }
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Notes updated successfully'
                    });
                } else {
                    throw new Error(data.error || 'Failed to update notes');
                }
            })
            .catch(error => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update notes'
                });
            });
        });

        // Add keyboard event listener to close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditNotesModal();
            }
        });

        // Account Menu Toggle
        document.getElementById('account-menu-button').addEventListener('click', function() {
            const menu = document.getElementById('account-menu');
            const button = this;
            const isExpanded = button.getAttribute('aria-expanded') === 'true';
            
            menu.classList.toggle('hidden');
            button.setAttribute('aria-expanded', !isExpanded);
        });

        // Close menu when clicking outside
        document.addEventListener('click', function(event) {
            const menu = document.getElementById('account-menu');
            const button = document.getElementById('account-menu-button');
            
            if (!menu.contains(event.target) && !button.contains(event.target)) {
                menu.classList.add('hidden');
                button.setAttribute('aria-expanded', 'false');
            }
        });

        // Account Settings Modal
        function showAccountSettings() {
            const modal = document.getElementById('account-settings-modal');
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
            
            // Close the dropdown menu
            document.getElementById('account-menu').classList.add('hidden');
            document.getElementById('account-menu-button').setAttribute('aria-expanded', 'false');

            // Fetch user details
            fetch('/dashboard/account')
                .then(response => response.json())
                .then(user => {
                    document.getElementById('full-name').value = user.full_name || '';
                })
                .catch(error => {
                    console.error('Error fetching account details:', error);
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: 'Failed to load account details'
                    });
                });
        }

        function closeAccountSettings() {
            const modal = document.getElementById('account-settings-modal');
            modal.classList.add('hidden');
            document.body.style.overflow = '';
        }

        // Handle account settings form submission
        document.getElementById('account-settings-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const fullName = document.getElementById('full-name').value;
            
            fetch('/dashboard/account', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ full_name: fullName })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeAccountSettings();
                    toast.show({
                        type: 'success',
                        title: 'Success',
                        message: 'Account settings updated successfully'
                    });
                } else {
                    throw new Error(data.error || 'Failed to update account settings');
                }
            })
            .catch(error => {
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to update account settings'
                });
            });
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeAccountSettings();
            }
        });

        function attachDayButtonHandler() {
            const dayBtn = document.querySelector('.fc-timeGridDay-button');
            if (dayBtn && !dayBtn.classList.contains('isked-day-handler')) {
                dayBtn.classList.add('isked-day-handler');
                dayBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const today = new Date();
                    console.log('Day button clicked: switching to today', today);
                    calendarInstance.gotoDate(today);
                    calendarInstance.changeView('timeGridDay');
                    setTimeout(() => {
                        console.log('Calendar current date after changeView:', calendarInstance.getDate());
                    }, 100);
                });
            }
        }
    </script>
</body>
</html> 