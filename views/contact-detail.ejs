<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>isked - Contact Details</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="/css/toast.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="/js/toast.js" defer></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .referral-stars {
            color: #F59E0B;
        }
        .status-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-weight: 500;
        }
        .status-new-lead { background-color: #FEF3C7; color: #92400E; }
        .status-qualified-lead { background-color: #DBEAFE; color: #1E40AF; }
        .status-warm-prospect { background-color: #F3E8FF; color: #7C3AED; }
        .status-hot-prospect { background-color: #FEE2E2; color: #DC2626; }
        .status-active-client { background-color: #D1FAE5; color: #059669; }
        .status-bni-member { background-color: #E0F2FE; color: #0369A1; }
        .status-inactive { background-color: #F3F4F6; color: #6B7280; }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Navigation -->
    <%- include('partials/navigation', { currentPage: 'contacts', user: user }) %>

    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center">
                    <a href="/contacts" class="text-gray-500 hover:text-gray-700 mr-4">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                    </a>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">Contact Details</h1>
                        <p class="text-sm text-gray-600 mt-1">View and manage contact information</p>
                    </div>
                </div>
                <div class="flex gap-3">
                    <!-- Primary Action - Always Visible -->
                    <button id="edit-contact-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        <span class="hidden sm:inline">Edit Contact</span>
                    </button>
                    
                    <!-- Desktop Actions - Hidden on Mobile -->
                    <div class="hidden sm:flex sm:gap-3">
                        <button id="add-interaction-btn" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Add Interaction
                        </button>
                        <button id="add-referral-btn" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Add Referral
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Loading State -->
        <div id="loading-state" class="text-center py-12">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p class="mt-2 text-gray-600">Loading contact details...</p>
        </div>

        <!-- Contact Details -->
        <div id="contact-details" class="hidden">
            <!-- Contact Header -->
            <div class="bg-white rounded-lg shadow mb-6">
                <div class="px-4 sm:px-6 py-6">
                    <!-- Mobile Layout -->
                    <div class="sm:hidden">
                        <div class="flex items-center mb-4">
                            <div class="flex-shrink-0 h-16 w-16">
                                <div class="h-16 w-16 rounded-full bg-blue-100 flex items-center justify-center">
                                    <span id="contact-initial" class="text-2xl font-medium text-blue-600"></span>
                                </div>
                            </div>
                            <div class="ml-4 flex-1 min-w-0">
                                <h2 id="contact-name" class="text-xl font-bold text-gray-900 truncate"></h2>
                                <p id="contact-company" class="text-sm text-gray-600 truncate"></p>
                                <p id="contact-position" class="text-xs text-gray-500 truncate"></p>
                            </div>
                        </div>
                        <div class="flex justify-between items-center">
                            <div class="text-center">
                                <span class="status-badge" id="contact-status-badge"></span>
                            </div>
                            <div class="text-center">
                                <div class="flex items-center justify-center">
                                    <span id="contact-referral-stars" class="referral-stars text-lg"></span>
                                </div>
                                <p class="text-xs text-gray-500 mt-1">Referral Potential</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Desktop Layout -->
                    <div class="hidden sm:flex items-start justify-between">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 h-16 w-16">
                                <div class="h-16 w-16 rounded-full bg-blue-100 flex items-center justify-center">
                                    <span id="contact-initial-desktop" class="text-2xl font-medium text-blue-600"></span>
                                </div>
                            </div>
                            <div class="ml-6">
                                <h2 id="contact-name-desktop" class="text-2xl font-bold text-gray-900"></h2>
                                <p id="contact-company-desktop" class="text-lg text-gray-600"></p>
                                <p id="contact-position-desktop" class="text-sm text-gray-500"></p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-4">
                            <div class="text-center">
                                <span class="status-badge" id="contact-status-badge-desktop"></span>
                            </div>
                            <div class="text-center">
                                <div class="flex items-center justify-center">
                                    <span id="contact-referral-stars-desktop" class="referral-stars text-xl"></span>
                                </div>
                                <p class="text-xs text-gray-500 mt-1">Referral Potential</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Contact Information -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Contact Info -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg shadow">
                        <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Contact Information</h3>
                        </div>
                        <div class="px-4 sm:px-6 py-4 space-y-4">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-500">Email</label>
                                    <p id="contact-email" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-500">Phone</label>
                                    <p id="contact-phone" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-500">Industry</label>
                                    <p id="contact-industry" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-500">Source</label>
                                    <p id="contact-source" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-500">BNI Member</label>
                                    <p id="contact-bni-member" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-500">BNI Chapter</label>
                                    <p id="contact-bni-chapter" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Notes</label>
                                <div id="contact-notes" class="mt-1 text-sm text-gray-900 whitespace-pre-wrap"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Interactions -->
                    <div class="bg-white rounded-lg shadow mt-6">
                        <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Recent Interactions</h3>
                        </div>
                        <div class="px-4 sm:px-6 py-4">
                            <div id="interactions-list">
                                <!-- Interactions will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="space-y-6">
                    <!-- Quick Stats -->
                    <div class="bg-white rounded-lg shadow">
                        <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Quick Stats</h3>
                        </div>
                        <div class="px-4 sm:px-6 py-4 space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Last Contact</label>
                                <p id="contact-last-contact" class="mt-1 text-sm text-gray-900"></p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Next Follow-up</label>
                                <p id="contact-next-followup" class="mt-1 text-sm text-gray-900"></p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Total Interactions</label>
                                <p id="contact-total-interactions" class="mt-1 text-sm text-gray-900"></p>
                            </div>
                        </div>
                    </div>

                    <!-- Referrals -->
                    <div class="bg-white rounded-lg shadow">
                        <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900">Referrals</h3>
                        </div>
                        <div class="px-4 sm:px-6 py-4">
                            <div id="referrals-list">
                                <!-- Referrals will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Error State -->
        <div id="error-state" class="hidden text-center py-12">
            <div class="text-red-600 mb-4">
                <svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Contact not found</h3>
            <p class="text-gray-600 mb-4">The contact you're looking for doesn't exist or you don't have permission to view it.</p>
            <a href="/contacts" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                Back to Contacts
            </a>
        </div>
    </div>

    <!-- Edit Contact Modal -->
    <div id="edit-contact-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50 overflow-y-auto">
        <div class="flex items-start justify-center min-h-screen p-4 py-8">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full my-8">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Edit Contact</h3>
                </div>
                <form id="edit-contact-form" class="px-6 py-4 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Name *</label>
                        <input type="text" id="edit-contact-name" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="email" id="edit-contact-email" name="email" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                        <input type="tel" id="edit-contact-phone" name="phone" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Company</label>
                        <input type="text" id="edit-contact-company" name="company" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Position</label>
                        <input type="text" id="edit-contact-position" name="position" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Industry</label>
                        <input type="text" id="edit-contact-industry" name="industry" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Source</label>
                        <select id="edit-contact-source" name="source" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="manual">Manual Entry</option>
                            <option value="booking">From Booking</option>
                            <option value="referral">Referral</option>
                            <option value="bni">BNI</option>
                            <option value="import">Import</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                        <select id="edit-contact-status" name="status" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="new_lead">New Lead</option>
                            <option value="qualified_lead">Qualified Lead</option>
                            <option value="warm_prospect">Warm Prospect</option>
                            <option value="hot_prospect">Hot Prospect</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">BNI Member</label>
                        <div class="flex items-center space-x-2">
                            <input type="checkbox" id="edit-contact-bni-member" name="bni_member" value="true" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <span class="text-sm text-gray-700">Yes</span>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">BNI Chapter</label>
                        <input type="text" id="edit-contact-bni-chapter" name="bni_chapter" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="e.g., BNI Manila">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Referral Potential</label>
                        <select id="edit-contact-referral-potential" name="referral_potential" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="1">1 - Cold</option>
                            <option value="2">2 - Warm</option>
                            <option value="3">3 - Good</option>
                            <option value="4">4 - Hot</option>
                            <option value="5">5 - Fire</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                        <textarea id="edit-contact-notes" name="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-edit-contact" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" form="edit-contact-form" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        Update Contact
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Interaction Modal -->
    <div id="add-interaction-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Add Interaction</h3>
                </div>
                <form id="add-interaction-form" class="px-6 py-4 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Type *</label>
                        <select name="type" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="meeting">Meeting</option>
                            <option value="call">Phone Call</option>
                            <option value="email">Email</option>
                            <option value="referral_given">Referral Given</option>
                            <option value="referral_received">Referral Received</option>
                            <option value="follow_up">Follow-up</option>
                            <option value="social_media">Social Media</option>
                            <option value="event">Event</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
                        <input type="text" name="subject" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <!-- Date and Time fields for Follow-up type -->
                    <div id="follow-up-datetime-fields" class="hidden">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Follow-up Date</label>
                                <input type="date" name="follow_up_date" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Follow-up Time</label>
                                <input type="time" name="follow_up_time" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                        <textarea name="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Outcome</label>
                        <select name="outcome" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="positive">Positive</option>
                            <option value="neutral">Neutral</option>
                            <option value="negative">Negative</option>
                            <option value="referral_potential">Referral Potential</option>
                        </select>
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-add-interaction" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" form="add-interaction-form" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        Add Interaction
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Interaction Modal -->
    <div id="edit-interaction-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Edit Interaction</h3>
                </div>
                <form id="edit-interaction-form" class="px-6 py-4 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Type *</label>
                        <select name="type" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="meeting">Meeting</option>
                            <option value="call">Phone Call</option>
                            <option value="email">Email</option>
                            <option value="referral_given">Referral Given</option>
                            <option value="referral_received">Referral Received</option>
                            <option value="follow_up">Follow-up</option>
                            <option value="social_media">Social Media</option>
                            <option value="event">Event</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
                        <input type="text" name="subject" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <!-- Date and Time fields for Follow-up type -->
                    <div id="edit-follow-up-datetime-fields" class="hidden">
                        <!-- Completion status indicator -->
                        <div id="edit-completion-status" class="hidden mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                            <div class="flex items-center">
                                <svg class="w-5 h-5 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <div>
                                    <p class="text-sm font-medium text-green-800">Follow-up Completed</p>
                                    <p id="edit-completion-datetime" class="text-xs text-green-600">Completed on [date] at [time]</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Follow-up Date</label>
                                <input type="date" name="follow_up_date" id="edit-follow-up-date" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Follow-up Time</label>
                                <input type="time" name="follow_up_time" id="edit-follow-up-time" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                        <textarea name="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Outcome</label>
                        <select name="outcome" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="positive">Positive</option>
                            <option value="neutral">Neutral</option>
                            <option value="negative">Negative</option>
                            <option value="referral_potential">Referral Potential</option>
                        </select>
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-edit-interaction" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" form="edit-interaction-form" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        Update Interaction
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Interaction Confirmation Modal -->
    <div id="delete-interaction-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Delete Interaction</h3>
                </div>
                <div class="px-6 py-4">
                    <div class="flex items-center mb-4">
                        <div class="flex-shrink-0">
                            <div class="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-gray-500">Are you sure you want to delete this interaction? This action cannot be undone.</p>
                        </div>
                    </div>
                </div>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-delete-interaction" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="button" id="confirm-delete-interaction" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                        Yes, Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Referral Modal -->
    <div id="edit-referral-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Edit Referral</h3>
                </div>
                <form id="edit-referral-form" class="px-6 py-4 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Referral Value</label>
                        <input type="number" id="edit-referral-value" name="value" step="0.01" placeholder="0.00" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <p class="text-xs text-gray-500 mt-1">Optional: Estimated value of the referral</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                        <textarea id="edit-referral-notes" name="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                        <p class="text-xs text-gray-500 mt-1">Optional: Additional notes about the referral</p>
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-edit-referral" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" form="edit-referral-form" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                        Update Referral
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Referral Modal -->
    <div id="add-referral-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Add Referral</h3>
                </div>
                <form id="add-referral-form" class="px-6 py-4 space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Referral Type *</label>
                        <select name="referral_type" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="given">This contact referred someone TO YOU</option>
                            <option value="received">You referred someone TO THIS CONTACT</option>
                        </select>
                    </div>
                    <div id="receiver-contact-section">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Who was referred TO YOU? *</label>
                        <div class="bg-gray-50 p-4 rounded-lg space-y-3">
                            <h4 class="text-sm font-medium text-gray-900">New Contact Details</h4>
                            <div class="grid grid-cols-2 gap-3">
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Name *</label>
                                    <input type="text" name="receiver_name" required class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Email</label>
                                    <input type="email" name="receiver_email" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Phone</label>
                                    <input type="tel" name="receiver_phone" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent">
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Company</label>
                                    <input type="text" name="receiver_company" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent">
                                </div>
                            </div>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Enter details of the person who was referred to you</p>
                    </div>
                    <div id="giver-contact-section" class="hidden">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Who referred TO THIS CONTACT? *</label>
                        <div class="relative">
                            <input type="text" id="giver-contact-search" name="giver_contact_search" 
                                   placeholder="Type to search contacts..." 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                   autocomplete="off">
                            <input type="hidden" name="giver_contact_id" id="giver_contact_id">
                            <div id="giver-contact-dropdown" class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg hidden max-h-60 overflow-y-auto">
                                <!-- Search results will appear here -->
                            </div>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Type to search your contacts</p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Referral Value</label>
                        <input type="number" name="value" step="0.01" placeholder="0.00" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <p class="text-xs text-gray-500 mt-1">Optional: Estimated value of the referral</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                        <textarea name="notes" rows="3" placeholder="Additional details about the referral..." class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-add-referral" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" form="add-referral-form" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                        Add Referral
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Referral Confirmation Modal -->
    <div id="delete-referral-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Delete Referral</h3>
                </div>
                <div class="px-6 py-4">
                    <div class="flex items-center mb-4">
                        <div class="flex-shrink-0">
                            <div class="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-gray-500">Are you sure you want to delete this referral? This action cannot be undone.</p>
                        </div>
                    </div>
                </div>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" id="cancel-delete-referral" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="button" id="confirm-delete-referral" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                        Yes, Delete
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Floating Action Button for Mobile -->
    <div class="sm:hidden fixed bottom-6 right-6 z-50">
        <!-- FAB Main Button -->
        <button id="fab-main-btn" class="bg-blue-600 hover:bg-blue-700 text-white w-14 h-14 rounded-full shadow-lg transition-all duration-300 flex items-center justify-center group">
            <svg id="fab-plus-icon" class="w-6 h-6 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            <svg id="fab-close-icon" class="w-6 h-6 transition-transform duration-300 rotate-45 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
        </button>
        
        <!-- FAB Action Buttons -->
        <div id="fab-actions" class="absolute bottom-16 right-0 space-y-3 opacity-0 scale-0 transition-all duration-300 transform origin-bottom-right">
            <!-- Add Interaction Button -->
            <button id="fab-add-interaction-btn" class="bg-green-600 hover:bg-green-700 text-white w-12 h-12 rounded-full shadow-lg transition-all duration-200 flex items-center justify-center group">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                <span class="absolute right-14 bg-gray-900 text-white text-xs px-2 py-1 rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                    Add Interaction
                </span>
            </button>
            
            <!-- Add Referral Button -->
            <button id="fab-add-referral-btn" class="bg-purple-600 hover:bg-purple-700 text-white w-12 h-12 rounded-full shadow-lg transition-all duration-200 flex items-center justify-center group">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                <span class="absolute right-14 bg-gray-900 text-white text-xs px-2 py-1 rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                    Add Referral
                </span>
            </button>
        </div>
    </div>

    <script>
        const contactId = '<%= contactId %>';
        let contact = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadContactDetails();
            initializeEventListeners();
        });

        // Load contact details
        async function loadContactDetails() {
            try {
                const response = await fetch(`/crm/${contactId}`);
                const data = await response.json();
                
                if (data.success) {
                    contact = data.contact;
                    displayContactDetails(data);
                } else {
                    showErrorState();
                }
            } catch (error) {
                console.error('Error loading contact:', error);
                showErrorState();
            }
        }

        // Display contact details
        function displayContactDetails(data) {
            const contact = data.contact;
            
            // Hide loading, show details
            document.getElementById('loading-state').classList.add('hidden');
            document.getElementById('contact-details').classList.remove('hidden');
            
            // Contact header - Mobile elements
            document.getElementById('contact-initial').textContent = contact.name.charAt(0).toUpperCase();
            document.getElementById('contact-name').textContent = contact.name;
            document.getElementById('contact-company').textContent = contact.company || 'No company';
            document.getElementById('contact-position').textContent = contact.position || 'No position';
            
            // Contact header - Desktop elements
            document.getElementById('contact-initial-desktop').textContent = contact.name.charAt(0).toUpperCase();
            document.getElementById('contact-name-desktop').textContent = contact.name;
            document.getElementById('contact-company-desktop').textContent = contact.company || 'No company';
            document.getElementById('contact-position-desktop').textContent = contact.position || 'No position';
            
            // Status and referral potential - Mobile
            const statusBadge = document.getElementById('contact-status-badge');
            statusBadge.textContent = formatStatus(contact.status);
            statusBadge.className = `status-badge status-${contact.status.replace('_', '-')}`;
            
            const referralStars = '★'.repeat(contact.referral_potential) + '☆'.repeat(5 - contact.referral_potential);
            document.getElementById('contact-referral-stars').textContent = referralStars;
            
            // Status and referral potential - Desktop
            const statusBadgeDesktop = document.getElementById('contact-status-badge-desktop');
            statusBadgeDesktop.textContent = formatStatus(contact.status);
            statusBadgeDesktop.className = `status-badge status-${contact.status.replace('_', '-')}`;
            
            document.getElementById('contact-referral-stars-desktop').textContent = referralStars;
            
            // Contact information
            document.getElementById('contact-email').textContent = contact.email || 'No email';
            document.getElementById('contact-phone').textContent = contact.phone || 'No phone';
            document.getElementById('contact-industry').textContent = contact.industry || 'No industry';
            document.getElementById('contact-source').textContent = formatSource(contact.source);
            document.getElementById('contact-bni-member').textContent = contact.bni_member ? 'Yes' : 'No';
            document.getElementById('contact-bni-chapter').textContent = contact.bni_chapter || 'Not specified';
            // Display notes with clickable links
            const notesElement = document.getElementById('contact-notes');
            const notes = contact.notes || 'No notes';
            notesElement.innerHTML = convertUrlsToLinks(notes);
            
            // Quick stats
            document.getElementById('contact-last-contact').textContent = 
                contact.last_contact_date ? new Date(contact.last_contact_date).toLocaleDateString() : 'Never';
            document.getElementById('contact-next-followup').textContent = 
                contact.next_follow_up ? new Date(contact.next_follow_up).toLocaleDateString() : 'Not set';
            document.getElementById('contact-total-interactions').textContent = data.interactions.length;
            
            // Display interactions
            displayInteractions(data.interactions);
            
            // Display referrals
            displayReferrals(data.referralsGiven, data.referralsReceived);
        }

        // Display interactions
        function displayInteractions(interactions) {
            const container = document.getElementById('interactions-list');
            
            if (interactions.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center py-4">No interactions yet.</p>';
                return;
            }
            
            container.innerHTML = interactions.map(interaction => `
                <div class="border-b border-gray-200 py-3 last:border-b-0 hover:bg-gray-50 transition-colors">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center space-x-3 mb-1">
                                <span class="text-sm font-medium text-gray-900">${interaction.subject || formatInteractionType(interaction.type)}</span>
                                ${interaction.status === 'completed' ? `<span class="text-green-600 text-sm">Done</span>` : ''}
                            </div>
                            ${interaction.notes ? `<p class="text-sm text-gray-600 mb-1">${convertUrlsToLinks(interaction.notes)}</p>` : ''}
                            ${interaction.follow_up_date ? `
                                <div class="flex items-center space-x-2">
                                    <span class="text-xs text-orange-600">
                                        📅 ${new Date(interaction.follow_up_date).toLocaleDateString()}${interaction.follow_up_time ? ` at ${formatTimeAMPM(interaction.follow_up_time)}` : ''}
                                    </span>
                                    ${interaction.status !== 'completed' ? `
                                        <button onclick="markInteractionAsDone(${interaction.id})" 
                                                class="text-xs bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded transition-colors">
                                            Mark Done
                                        </button>
                                    ` : ''}
                                </div>
                            ` : ''}
                        </div>
                        <div class="flex items-center space-x-1 ml-4">
                            <button onclick="editInteraction(${interaction.id})" class="text-gray-400 hover:text-blue-600 p-1 rounded hover:bg-blue-50 transition-colors" title="Edit">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                            </button>
                            <button onclick="deleteInteraction(${interaction.id})" class="text-gray-400 hover:text-red-600 p-1 rounded hover:bg-red-50 transition-colors" title="Delete">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                            <span class="text-xs text-gray-400 ml-2">${new Date(interaction.date).toLocaleDateString()}</span>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Display referrals
        function displayReferrals(referralsGiven, referralsReceived) {
            const container = document.getElementById('referrals-list');
            
            if (referralsGiven.length === 0 && referralsReceived.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center py-4">No referrals yet.</p>';
                return;
            }
            
            let html = '';
            
            if (referralsGiven.length > 0) {
                html += '<div class="mb-4"><h4 class="text-sm font-medium text-gray-900 mb-2">Referrals Given</h4>';
                html += referralsGiven.map(ref => `
                    <div class="flex items-center justify-between text-sm text-gray-600 mb-1 p-2 rounded hover:bg-gray-50">
                        <div class="flex-1">
                            → ${ref.receiver_name} (${ref.receiver_company || 'No company'})
                            <span class="text-xs text-gray-500">${new Date(ref.created_at).toLocaleDateString()}</span>
                            ${ref.value ? `<span class="text-xs text-green-600 ml-2">$${ref.value}</span>` : ''}
                            ${ref.notes ? `<div class="text-xs text-gray-500 mt-1">${convertUrlsToLinks(ref.notes)}</div>` : ''}
                        </div>
                        <div class="flex items-center space-x-1 ml-2">
                            <button onclick="editReferral(${ref.id})" class="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50" title="Edit Referral">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                            </button>
                            <button onclick="deleteReferral(${ref.id})" class="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50" title="Delete Referral">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                `).join('');
                html += '</div>';
            }
            
            if (referralsReceived.length > 0) {
                html += '<div><h4 class="text-sm font-medium text-gray-900 mb-2">Referrals Received</h4>';
                html += referralsReceived.map(ref => `
                    <div class="flex items-center justify-between text-sm text-gray-600 mb-1 p-2 rounded hover:bg-gray-50">
                        <div class="flex-1">
                            ← ${ref.giver_name} (${ref.giver_company || 'No company'})
                            <span class="text-xs text-gray-500">${new Date(ref.created_at).toLocaleDateString()}</span>
                            ${ref.value ? `<span class="text-xs text-green-600 ml-2">$${ref.value}</span>` : ''}
                            ${ref.notes ? `<div class="text-xs text-gray-500 mt-1">${convertUrlsToLinks(ref.notes)}</div>` : ''}
                        </div>
                        <div class="flex items-center space-x-1 ml-2">
                            <button onclick="editReferral(${ref.id})" class="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50" title="Edit Referral">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                            </button>
                            <button onclick="deleteReferral(${ref.id})" class="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50" title="Delete Referral">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                `).join('');
                html += '</div>';
            }
            
            container.innerHTML = html;
        }

        // Show error state
        function showErrorState() {
            document.getElementById('loading-state').classList.add('hidden');
            document.getElementById('error-state').classList.remove('hidden');
        }

        // Format status
        function formatStatus(status) {
            const statusMap = {
                'new_lead': 'New Lead',
                'qualified_lead': 'Qualified Lead',
                'warm_prospect': 'Warm Prospect',
                'hot_prospect': 'Hot Prospect',
                'active_client': 'Active Client',
                'bni_member': 'BNI Member',
                'inactive': 'Inactive'
            };
            return statusMap[status] || status;
        }

        // Convert URLs in text to clickable links
        function convertUrlsToLinks(text) {
            if (!text) return text;
            
            // Regular expression to match URLs (http, https, www, and common domains)
            const urlRegex = /(https?:\/\/[^\s]+|www\.[^\s]+|[a-zA-Z0-9-]+\.[a-zA-Z]{2,}(?:\/[^\s]*)?)/g;
            
            return text.replace(urlRegex, function(url) {
                // Add protocol if missing
                let href = url;
                if (!url.match(/^https?:\/\//)) {
                    href = 'http://' + url;
                }
                
                // Escape HTML to prevent XSS
                const escapedUrl = url.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                
                return `<a href="${href}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline">${escapedUrl}</a>`;
            });
        }

        // Format source
        function formatSource(source) {
            const sourceMap = {
                'manual': 'Manual Entry',
                'booking': 'From Booking',
                'referral': 'Referral',
                'bni': 'BNI',
                'import': 'Import'
            };
            return sourceMap[source] || source;
        }

        // Format interaction type
        function formatInteractionType(type) {
            const typeMap = {
                'meeting': 'Meeting',
                'call': 'Call',
                'email': 'Email',
                'referral_given': 'Referral Given',
                'referral_received': 'Referral Received',
                'follow_up': 'Follow-up',
                'social_media': 'Social Media',
                'event': 'Event'
            };
            return typeMap[type] || type;
        }

        // Get interaction type color
        function getInteractionTypeColor(type) {
            const colorMap = {
                'meeting': 'bg-purple-100 text-purple-800',
                'call': 'bg-blue-100 text-blue-800',
                'email': 'bg-green-100 text-green-800',
                'referral_given': 'bg-yellow-100 text-yellow-800',
                'referral_received': 'bg-orange-100 text-orange-800',
                'follow_up': 'bg-indigo-100 text-indigo-800',
                'social_media': 'bg-pink-100 text-pink-800',
                'event': 'bg-gray-100 text-gray-800'
            };
            return colorMap[type] || 'bg-blue-100 text-blue-800';
        }

        // Get outcome color
        function getOutcomeColor(outcome) {
            const colorMap = {
                'positive': 'bg-green-100 text-green-800',
                'neutral': 'bg-gray-100 text-gray-800',
                'negative': 'bg-red-100 text-red-800',
                'referral_potential': 'bg-yellow-100 text-yellow-800'
            };
            return colorMap[outcome] || 'bg-gray-100 text-gray-800';
        }

        // Format time in AM/PM format
        function formatTimeAMPM(timeString) {
            if (!timeString) return '';
            
            // Handle both HH:MM:SS and HH:MM formats
            const timeParts = timeString.split(':');
            const hours = parseInt(timeParts[0]);
            const minutes = timeParts[1];
            
            if (isNaN(hours)) return timeString;
            
            const ampm = hours >= 12 ? 'PM' : 'AM';
            const displayHours = hours % 12 || 12; // Convert 0 to 12
            
            return `${displayHours}:${minutes} ${ampm}`;
        }

        // Initialize event listeners
        function initializeEventListeners() {
            // Edit contact button
            document.getElementById('edit-contact-btn').addEventListener('click', showEditContactModal);
            
            // Edit contact form
            document.getElementById('edit-contact-form').addEventListener('submit', handleEditContact);
            
            // Cancel edit contact
            document.getElementById('cancel-edit-contact').addEventListener('click', hideEditContactModal);
            
            // Desktop buttons
            document.getElementById('add-interaction-btn').addEventListener('click', showAddInteractionModal);
            document.getElementById('add-referral-btn').addEventListener('click', showAddReferralModal);
            
            // FAB buttons
            document.getElementById('fab-main-btn').addEventListener('click', toggleFAB);
            document.getElementById('fab-add-interaction-btn').addEventListener('click', () => {
                showAddInteractionModal();
                hideFAB();
            });
            document.getElementById('fab-add-referral-btn').addEventListener('click', () => {
                showAddReferralModal();
                hideFAB();
            });
            
            // Cancel add interaction
            document.getElementById('cancel-add-interaction').addEventListener('click', hideAddInteractionModal);
            
            // Add interaction form
            document.getElementById('add-interaction-form').addEventListener('submit', handleAddInteraction);
            
            // Interaction type change handler for follow-up fields
            document.getElementById('add-interaction-form').querySelector('select[name="type"]').addEventListener('change', handleInteractionTypeChange);
            
            // Edit interaction modal event listeners
            document.getElementById('cancel-edit-interaction').addEventListener('click', hideEditInteractionModal);
            document.getElementById('edit-interaction-form').addEventListener('submit', handleEditInteraction);
            document.getElementById('edit-interaction-form').querySelector('select[name="type"]').addEventListener('change', handleEditInteractionTypeChange);
            
            // Delete interaction modal event listeners
            document.getElementById('cancel-delete-interaction').addEventListener('click', cancelDeleteInteraction);
            document.getElementById('confirm-delete-interaction').addEventListener('click', confirmDeleteInteraction);
            
            // Edit referral modal event listeners
            document.getElementById('cancel-edit-referral').addEventListener('click', hideEditReferralModal);
            document.getElementById('edit-referral-form').addEventListener('submit', handleEditReferral);
            
            // Delete referral modal event listeners
            document.getElementById('cancel-delete-referral').addEventListener('click', cancelDeleteReferral);
            document.getElementById('confirm-delete-referral').addEventListener('click', confirmDeleteReferral);
            
            // Cancel add referral
            document.getElementById('cancel-add-referral').addEventListener('click', hideAddReferralModal);
            
            // Add referral form
            document.getElementById('add-referral-form').addEventListener('submit', handleAddReferral);
            
            // Referral type change handler
            document.getElementById('add-referral-form').querySelector('select[name="referral_type"]').addEventListener('change', handleReferralTypeChange);
            
            // Contact search functionality
            const searchInput = document.getElementById('giver-contact-search');
            if (searchInput) {
                searchInput.addEventListener('input', function(e) {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        searchContactsForReferral(e.target.value);
                    }, 300); // 300ms debounce
                });
                
                // Hide dropdown when clicking outside
                document.addEventListener('click', function(e) {
                    if (!e.target.closest('#giver-contact-section')) {
                        hideContactDropdown();
                    }
                });
                
                // Handle dropdown item clicks
                document.addEventListener('click', function(e) {
                    if (e.target.closest('.contact-option')) {
                        const option = e.target.closest('.contact-option');
                        const contactId = option.dataset.contactId;
                        const contactName = option.dataset.contactName;
                        const contactCompany = option.dataset.contactCompany;
                        selectContact(contactId, contactName, contactCompany);
                    }
                });
            }
            
            // Close FAB when clicking outside
            document.addEventListener('click', function(e) {
                const fabContainer = document.getElementById('fab-main-btn').parentElement;
                if (!fabContainer.contains(e.target)) {
                    hideFAB();
                }
            });
        }
        
        // FAB functions
        function toggleFAB() {
            const fabActions = document.getElementById('fab-actions');
            const plusIcon = document.getElementById('fab-plus-icon');
            const closeIcon = document.getElementById('fab-close-icon');
            
            if (fabActions.classList.contains('opacity-0')) {
                // Show FAB actions
                fabActions.classList.remove('opacity-0', 'scale-0');
                fabActions.classList.add('opacity-100', 'scale-100');
                plusIcon.classList.add('hidden');
                closeIcon.classList.remove('hidden');
            } else {
                // Hide FAB actions
                hideFAB();
            }
        }
        
        function hideFAB() {
            const fabActions = document.getElementById('fab-actions');
            const plusIcon = document.getElementById('fab-plus-icon');
            const closeIcon = document.getElementById('fab-close-icon');
            
            fabActions.classList.remove('opacity-100', 'scale-100');
            fabActions.classList.add('opacity-0', 'scale-0');
            plusIcon.classList.remove('hidden');
            closeIcon.classList.add('hidden');
        }

        // Show add interaction modal
        function showAddInteractionModal() {
            document.getElementById('add-interaction-modal').classList.remove('hidden');
        }

        // Hide add interaction modal
        function hideAddInteractionModal() {
            document.getElementById('add-interaction-modal').classList.add('hidden');
            document.getElementById('add-interaction-form').reset();
            // Hide follow-up fields when modal is closed
            document.getElementById('follow-up-datetime-fields').classList.add('hidden');
        }

        // Handle interaction type change to show/hide follow-up fields
        function handleInteractionTypeChange(e) {
            const selectedType = e.target.value;
            const followUpFields = document.getElementById('follow-up-datetime-fields');
            
            if (selectedType === 'follow_up') {
                followUpFields.classList.remove('hidden');
                // Set default date to tomorrow
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                const dateInput = followUpFields.querySelector('input[name="follow_up_date"]');
                dateInput.value = tomorrow.toISOString().split('T')[0];
                // Set default time to 10:00 AM
                const timeInput = followUpFields.querySelector('input[name="follow_up_time"]');
                timeInput.value = '10:00';
            } else {
                followUpFields.classList.add('hidden');
                // Clear the fields when hidden
                followUpFields.querySelector('input[name="follow_up_date"]').value = '';
                followUpFields.querySelector('input[name="follow_up_time"]').value = '';
            }
        }

        // Show edit contact modal
        function showEditContactModal() {
            if (!contact) return;
            
            // Populate the edit form with current contact data
            document.getElementById('edit-contact-name').value = contact.name;
            document.getElementById('edit-contact-email').value = contact.email || '';
            document.getElementById('edit-contact-phone').value = contact.phone || '';
            document.getElementById('edit-contact-company').value = contact.company || '';
            document.getElementById('edit-contact-position').value = contact.position || '';
            document.getElementById('edit-contact-industry').value = contact.industry || '';
            document.getElementById('edit-contact-source').value = contact.source || 'manual';
            document.getElementById('edit-contact-status').value = contact.status;
            document.getElementById('edit-contact-referral-potential').value = contact.referral_potential;
            document.getElementById('edit-contact-notes').value = contact.notes || '';
            
            // Populate BNI fields
            document.getElementById('edit-contact-bni-member').checked = contact.bni_member === true;
            document.getElementById('edit-contact-bni-chapter').value = contact.bni_chapter || '';
            
            // Show the modal
            document.getElementById('edit-contact-modal').classList.remove('hidden');
        }

        // Hide edit contact modal
        function hideEditContactModal() {
            document.getElementById('edit-contact-modal').classList.add('hidden');
            document.getElementById('edit-contact-form').reset();
        }

        // Handle edit contact form submission
        async function handleEditContact(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const contactData = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch(`/crm/${contactId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(contactData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    hideEditContactModal();
                    loadContactDetails(); // Reload to show updated data
                    toast.show({
                        type: 'success',
                        title: 'Contact updated!',
                        message: `${contactData.name} has been updated.`
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to update contact'
                    });
                }
            } catch (error) {
                console.error('Error updating contact:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to update contact'
                });
            }
        }

        // Handle add interaction form submission
        async function handleAddInteraction(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const interactionData = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch(`/crm/${contactId}/interactions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(interactionData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    hideAddInteractionModal();
                    loadContactDetails(); // Reload to show new interaction
                    toast.show({
                        type: 'success',
                        title: 'Interaction added!',
                        message: 'The interaction has been recorded.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to add interaction'
                    });
                }
            } catch (error) {
                console.error('Error adding interaction:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to add interaction'
                });
            }
        }

        // Show add referral modal
        function showAddReferralModal() {
            document.getElementById('add-referral-modal').classList.remove('hidden');
        }

        // Hide add referral modal
        function hideAddReferralModal() {
            document.getElementById('add-referral-modal').classList.add('hidden');
            document.getElementById('add-referral-form').reset();
            
            // Reset form sections and required attributes
            document.getElementById('receiver-contact-section').classList.remove('hidden');
            document.getElementById('giver-contact-section').classList.add('hidden');
            
            // Reset required attributes to default state
            document.querySelector('input[name="receiver_name"]').required = true;
            document.querySelector('input[name="receiver_email"]').required = false;
            document.querySelector('input[name="receiver_phone"]').required = false;
            document.querySelector('input[name="receiver_company"]').required = false;
            document.getElementById('giver-contact-search').required = false;
            
            // Clear search input and hidden field
            document.getElementById('giver-contact-search').value = '';
            document.getElementById('giver_contact_id').value = '';
            hideContactDropdown();
        }

        // Search contacts for referral autocomplete
        let searchTimeout;
        async function searchContactsForReferral(query) {
            if (query.length < 2) {
                hideContactDropdown();
                return;
            }
            
            try {
                const response = await fetch(`/crm/?search=${encodeURIComponent(query)}&limit=10`);
                const data = await response.json();
                
                if (data.success) {
                    const contacts = data.contacts.filter(c => c.id != contactId); // Exclude current contact
                    showContactDropdown(contacts);
                }
            } catch (error) {
                console.error('Error searching contacts:', error);
                hideContactDropdown();
            }
        }
        
        function showContactDropdown(contacts) {
            const dropdown = document.getElementById('giver-contact-dropdown');
            if (contacts.length === 0) {
                dropdown.innerHTML = '<div class="px-3 py-2 text-gray-500 text-sm">No contacts found</div>';
            } else {
                dropdown.innerHTML = contacts.map(contact => `
                    <div class="px-3 py-2 hover:bg-gray-100 cursor-pointer contact-option" 
                         data-contact-id="${contact.id}" 
                         data-contact-name="${contact.name}"
                         data-contact-company="${contact.company || ''}">
                        <div class="font-medium text-gray-900">${contact.name}</div>
                        ${contact.company ? `<div class="text-sm text-gray-500">${contact.company}</div>` : ''}
                    </div>
                `).join('');
            }
            dropdown.classList.remove('hidden');
        }
        
        function hideContactDropdown() {
            document.getElementById('giver-contact-dropdown').classList.add('hidden');
        }
        
        function selectContact(contactId, contactName, contactCompany) {
            const searchInput = document.getElementById('giver-contact-search');
            const hiddenInput = document.getElementById('giver_contact_id');
            
            searchInput.value = `${contactName}${contactCompany ? ` (${contactCompany})` : ''}`;
            hiddenInput.value = contactId;
            hideContactDropdown();
        }

        // Handle referral type change
        function handleReferralTypeChange(e) {
            const referralType = e.target.value;
            const receiverSection = document.getElementById('receiver-contact-section');
            const giverSection = document.getElementById('giver-contact-section');
            
            if (referralType === 'given') {
                // This contact gave a referral to someone else
                receiverSection.classList.remove('hidden');
                giverSection.classList.add('hidden');
                
                // Set required attributes for receiver section
                document.querySelector('input[name="receiver_name"]').required = true;
                document.getElementById('giver-contact-search').required = false;
                
            } else if (referralType === 'received') {
                // This contact received a referral from someone else
                receiverSection.classList.add('hidden');
                giverSection.classList.remove('hidden');
                
                // Remove required attributes from receiver section
                document.querySelector('input[name="receiver_name"]').required = false;
                document.querySelector('input[name="receiver_email"]').required = false;
                document.querySelector('input[name="receiver_phone"]').required = false;
                document.querySelector('input[name="receiver_company"]').required = false;
                
                // Set required for giver section
                document.getElementById('giver-contact-search').required = true;
            }
        }


        // Handle add referral form submission
        async function handleAddReferral(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const referralData = Object.fromEntries(formData.entries());
            
            try {
                // Determine giver and receiver based on referral type
                if (referralData.referral_type === 'given') {
                    // This contact referred someone to you - create new contact
                    referralData.giver_contact_id = contactId;
                    
                    // Create new contact for the person who was referred
                    const newContactData = {
                        name: referralData.receiver_name,
                        email: referralData.receiver_email || null,
                        phone: referralData.receiver_phone || null,
                        company: referralData.receiver_company || null,
                        source: 'referral',
                        status: 'new_lead',
                        referral_potential: 3
                    };
                    
                    const contactResponse = await fetch('/crm/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(newContactData)
                    });
                    
                    const contactResult = await contactResponse.json();
                    
                    if (!contactResult.success) {
                        throw new Error(contactResult.error || 'Failed to create new contact');
                    }
                    
                    referralData.receiver_contact_id = contactResult.contact.id;
                    
                } else if (referralData.referral_type === 'received') {
                    // You referred someone to this contact - select existing contact
                    referralData.giver_contact_id = referralData.giver_contact_id;
                    referralData.receiver_contact_id = contactId;
                }
                
                // Remove fields that are not needed in the referral API
                delete referralData.referral_type;
                delete referralData.receiver_name;
                delete referralData.receiver_email;
                delete referralData.receiver_phone;
                delete referralData.receiver_company;
                
                const response = await fetch('/crm/referrals', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(referralData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    hideAddReferralModal();
                    loadContactDetails(); // Reload to show new referral
                    toast.show({
                        type: 'success',
                        title: 'Referral added!',
                        message: 'The referral has been recorded and new contact created.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to add referral'
                    });
                }
            } catch (error) {
                console.error('Error adding referral:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: error.message || 'Failed to add referral'
                });
            }
        }

        // Mark interaction as done
        async function markInteractionAsDone(interactionId) {
            try {
                const response = await fetch(`/crm/${contactId}/interactions/${interactionId}/mark-done`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Reload contact details to show updated interaction
                    loadContactDetails();
                    toast.show({
                        type: 'success',
                        title: 'Interaction marked as done!',
                        message: 'The follow-up has been completed.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to mark interaction as done'
                    });
                }
            } catch (error) {
                console.error('Error marking interaction as done:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to mark interaction as done'
                });
            }
        }

        // Edit interaction
        async function editInteraction(interactionId) {
            try {
                // Find the interaction data from the current interactions
                const interactions = await getCurrentInteractions();
                const interaction = interactions.find(i => i.id === interactionId);
                
                if (!interaction) {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: 'Interaction not found'
                    });
                    return;
                }
                
                // Populate the edit form with current data
                const form = document.getElementById('edit-interaction-form');
                form.querySelector('[name="type"]').value = interaction.type;
                form.querySelector('[name="subject"]').value = interaction.subject || '';
                form.querySelector('[name="notes"]').value = interaction.notes || '';
                form.querySelector('[name="outcome"]').value = interaction.outcome || '';
                
                // Handle follow-up date/time and completion status
                const followUpFields = document.getElementById('edit-follow-up-datetime-fields');
                const completionStatus = document.getElementById('edit-completion-status');
                const completionDateTime = document.getElementById('edit-completion-datetime');
                const followUpDateInput = document.getElementById('edit-follow-up-date');
                const followUpTimeInput = document.getElementById('edit-follow-up-time');
                
                if (interaction.type === 'follow_up') {
                    followUpFields.classList.remove('hidden');
                    
                    // Check if this follow-up is completed
                    if (interaction.status === 'completed') {
                        // Show completion status
                        completionStatus.classList.remove('hidden');
                        
                        // Format the completion date/time
                        const completionDate = new Date(interaction.date);
                        const formattedDate = completionDate.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                        });
                        const formattedTime = completionDate.toLocaleTimeString('en-US', {
                            hour: 'numeric',
                            minute: '2-digit',
                            hour12: true
                        });
                        
                        completionDateTime.textContent = `Completed on ${formattedDate} at ${formattedTime}`;
                        
                        // Disable the date/time inputs
                        followUpDateInput.disabled = true;
                        followUpTimeInput.disabled = true;
                        followUpDateInput.classList.add('bg-gray-100', 'cursor-not-allowed');
                        followUpTimeInput.classList.add('bg-gray-100', 'cursor-not-allowed');
                        
                        // Clear the values since they're null for completed follow-ups
                        followUpDateInput.value = '';
                        followUpTimeInput.value = '';
                    } else {
                        // Hide completion status for pending follow-ups
                        completionStatus.classList.add('hidden');
                        
                        // Enable the date/time inputs
                        followUpDateInput.disabled = false;
                        followUpTimeInput.disabled = false;
                        followUpDateInput.classList.remove('bg-gray-100', 'cursor-not-allowed');
                        followUpTimeInput.classList.remove('bg-gray-100', 'cursor-not-allowed');
                        
                        // Populate the values
                        if (interaction.follow_up_date) {
                            followUpDateInput.value = interaction.follow_up_date;
                        } else {
                            followUpDateInput.value = '';
                        }
                        if (interaction.follow_up_time) {
                            followUpTimeInput.value = interaction.follow_up_time;
                        } else {
                            followUpTimeInput.value = '';
                        }
                    }
                } else {
                    followUpFields.classList.add('hidden');
                }
                
                // Store the interaction ID for the form submission
                form.dataset.interactionId = interactionId;
                
                // Show the modal
                document.getElementById('edit-interaction-modal').classList.remove('hidden');
                
            } catch (error) {
                console.error('Error loading interaction for edit:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to load interaction data'
                });
            }
        }

        // Delete interaction
        async function deleteInteraction(interactionId) {
            // Store the interaction ID for the confirmation
            document.getElementById('confirm-delete-interaction').dataset.interactionId = interactionId;
            
            // Show the modal
            document.getElementById('delete-interaction-modal').classList.remove('hidden');
        }

        // Confirm delete interaction
        async function confirmDeleteInteraction() {
            const interactionId = document.getElementById('confirm-delete-interaction').dataset.interactionId;
            
            try {
                const response = await fetch(`/crm/${contactId}/interactions/${interactionId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Hide the modal
                    document.getElementById('delete-interaction-modal').classList.add('hidden');
                    
                    // Reload contact details to show updated interactions
                    loadContactDetails();
                    toast.show({
                        type: 'success',
                        title: 'Interaction deleted!',
                        message: 'The interaction has been removed.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to delete interaction'
                    });
                }
            } catch (error) {
                console.error('Error deleting interaction:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to delete interaction'
                });
            }
        }

        // Edit referral
        async function editReferral(referralId) {
            try {
                // Get current referrals to find the one to edit
                const response = await fetch(`/crm/${contactId}`);
                const data = await response.json();
                
                if (!data.success) {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: 'Failed to load referral data'
                    });
                    return;
                }
                
                // Find the referral in both given and received arrays
                const allReferrals = [...data.referralsGiven, ...data.referralsReceived];
                const referral = allReferrals.find(ref => ref.id === referralId);
                
                if (!referral) {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: 'Referral not found'
                    });
                    return;
                }
                
                // Populate the edit form
                document.getElementById('edit-referral-value').value = referral.value || '';
                document.getElementById('edit-referral-notes').value = referral.notes || '';
                
                // Store the referral ID for the form submission
                document.getElementById('edit-referral-form').dataset.referralId = referralId;
                
                // Show the modal
                document.getElementById('edit-referral-modal').classList.remove('hidden');
                
            } catch (error) {
                console.error('Error loading referral:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to load referral data'
                });
            }
        }

        // Delete referral
        async function deleteReferral(referralId) {
            // Store the referral ID for the confirmation
            document.getElementById('confirm-delete-referral').dataset.referralId = referralId;
            
            // Show the modal
            document.getElementById('delete-referral-modal').classList.remove('hidden');
        }

        // Cancel delete interaction
        function cancelDeleteInteraction() {
            document.getElementById('delete-interaction-modal').classList.add('hidden');
        }

        // Helper function to get current interactions
        async function getCurrentInteractions() {
            try {
                const response = await fetch(`/crm/${contactId}`);
                const data = await response.json();
                return data.interactions || [];
            } catch (error) {
                console.error('Error fetching interactions:', error);
                return [];
            }
        }

        // Hide edit interaction modal
        function hideEditInteractionModal() {
            document.getElementById('edit-interaction-modal').classList.add('hidden');
        }

        // Handle edit interaction form submission
        async function handleEditInteraction(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const interactionData = Object.fromEntries(formData.entries());
            const interactionId = e.target.dataset.interactionId;
            
            // Check if this is a completed follow-up - prevent editing follow-up date/time
            const interactions = await getCurrentInteractions();
            const interaction = interactions.find(i => i.id === interactionId);
            
            if (interaction && interaction.type === 'follow_up' && interaction.status === 'completed') {
                // For completed follow-ups, don't send follow-up date/time data
                delete interactionData.follow_up_date;
                delete interactionData.follow_up_time;
            } else {
                // Convert empty strings to null for follow-up fields
                if (interactionData.follow_up_date === '') {
                    interactionData.follow_up_date = null;
                }
                if (interactionData.follow_up_time === '') {
                    interactionData.follow_up_time = null;
                }
            }
            
            try {
                const response = await fetch(`/crm/${contactId}/interactions/${interactionId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(interactionData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    hideEditInteractionModal();
                    loadContactDetails(); // Reload to show updated interaction
                    toast.show({
                        type: 'success',
                        title: 'Interaction updated!',
                        message: 'The interaction has been updated successfully.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to update interaction'
                    });
                }
            } catch (error) {
                console.error('Error updating interaction:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to update interaction'
                });
            }
        }

        // Handle edit interaction type change for follow-up fields
        function handleEditInteractionTypeChange(e) {
            const followUpFields = document.getElementById('edit-follow-up-datetime-fields');
            if (e.target.value === 'follow_up') {
                followUpFields.classList.remove('hidden');
            } else {
                followUpFields.classList.add('hidden');
            }
        }

        // Hide edit referral modal
        function hideEditReferralModal() {
            document.getElementById('edit-referral-modal').classList.add('hidden');
            document.getElementById('edit-referral-form').reset();
        }

        // Handle edit referral form submission
        async function handleEditReferral(e) {
            e.preventDefault();
            
            const referralId = e.target.dataset.referralId;
            const formData = new FormData(e.target);
            const referralData = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch(`/crm/referrals/${referralId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(referralData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    hideEditReferralModal();
                    loadContactDetails(); // Reload to show updated data
                    toast.show({
                        type: 'success',
                        title: 'Referral updated!',
                        message: 'The referral has been updated.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to update referral'
                    });
                }
            } catch (error) {
                console.error('Error updating referral:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to update referral'
                });
            }
        }

        // Confirm delete referral
        async function confirmDeleteReferral() {
            const referralId = document.getElementById('confirm-delete-referral').dataset.referralId;
            
            try {
                const response = await fetch(`/crm/referrals/${referralId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Hide the modal
                    document.getElementById('delete-referral-modal').classList.add('hidden');
                    
                    // Reload contact details to show updated referrals
                    loadContactDetails();
                    toast.show({
                        type: 'success',
                        title: 'Referral deleted!',
                        message: 'The referral has been removed.'
                    });
                } else {
                    toast.show({
                        type: 'error',
                        title: 'Error',
                        message: data.error || 'Failed to delete referral'
                    });
                }
            } catch (error) {
                console.error('Error deleting referral:', error);
                toast.show({
                    type: 'error',
                    title: 'Error',
                    message: 'Failed to delete referral'
                });
            }
        }

        // Cancel delete referral
        function cancelDeleteReferral() {
            document.getElementById('delete-referral-modal').classList.add('hidden');
        }
    </script>
</body>
</html>
